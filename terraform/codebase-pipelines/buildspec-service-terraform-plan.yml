version: 0.2

env:
  variables:
    TERRAFORM_VERSION: 1.12.2
  parameter-store:
    SLACK_TOKEN: /codebuild/slack_oauth_token

phases:
  install:
    commands:
      # Install cli tools
      ## regctl for listing images
      - curl -s -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 > /usr/local/bin/regctl
      - chmod +x /usr/local/bin/regctl

      ## Terraform
      - curl -s -qL -o terraform_install.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip terraform_install.zip
      - chmod +x terraform
      - mv terraform /usr/local/bin/terraform
      - rm terraform_install.zip

      # Install Platform Helper
      ## Clone platform-tools
      - cd "${CODEBUILD_SRC_DIR}"
      - codestar_connection_id=$(echo "${CODESTAR_CONNECTION_ARN##*/}")
      - export GIT_CLONE_BASE_URL="https://codestar-connections.${AWS_REGION}.amazonaws.com/git-http/${AWS_ACCOUNT_ID}/${AWS_REGION}/$codestar_connection_id/uktrade"
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      - git config --global advice.detachedHead false
      - git clone "${GIT_CLONE_BASE_URL}/platform-tools.git" --branch "${PLATFORM_HELPER_VERSION}" --depth 1 platform-tools
      - 'echo -e "\nCurrent platform-tools branch/commit: $(git rev-parse --abbrev-ref HEAD)/$(git rev-parse HEAD)"'
      - cd "${CODEBUILD_SRC_DIR}/platform-tools"
      ## Setup venv
      - source terraform/scripts/setup_venv.sh
      ## yq for yaml processing (The Go-based variant, not Python-based)
      - curl -sL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o /usr/local/bin/yq
      - chmod +x /usr/local/bin/yq
      ## Install platform helper
      - ./terraform/scripts/install_platform_helper.sh

  pre_build:
    commands:
      # Check if the specified image tag exists
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - |
        if ! docker manifest inspect "${REPOSITORY_URL}:${IMAGE_TAG}" > /dev/null 2>&1; then
          echo "Error: Image tag ${IMAGE_TAG} not found in repository ${REPOSITORY_URL}" | tee output.log
          exit 1
        fi

      # Check environment exists in config
      - |
        if [ $(echo $ENV_CONFIG | jq 'has('\"${ENVIRONMENT}\"')') == "false" ]; then
          echo "Error: Environment ${ENVIRONMENT} not listed in environment config" | tee output.log
          exit 1
        fi

  build:
    commands:
      # Construct Slack message env vars
      - SLACK_REF=$(regctl image config "${REPOSITORY_URL}:${IMAGE_TAG}" | jq -r '.config.Labels."uk.gov.trade.digital.build.timestamp"')
      - |
        if [ "${SLACK_REF}" = "null" ] || [ -z "${SLACK_REF}" ]; then
          echo "Error: Image contains no timestamp label" | tee output.log
          exit 1
        fi

      # Extract the pipeline name from CODEBUILD_INITIATOR default env var
      - | 
        if [[ "${CODEBUILD_INITIATOR}" == codepipeline/* ]]; then 
          PIPELINE_NAME=$(echo "${CODEBUILD_INITIATOR}" | cut -d'/' -f2) 
        else
          echo "Error: Build not triggered by CodePipeline." | tee output.log
          exit 1 
        fi

      # Construct the pipeline execution URL
      - PIPELINE_EXECUTION_URL="https://${AWS_REGION}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${PIPELINE_NAME}/executions/${PIPELINE_EXECUTION_ID}"
      - BUILD_ID_PREFIX=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)

      # Assume environment role
      - account_id=$(echo ${ENV_CONFIG} | jq -c -r .${ENVIRONMENT}.account_id)
      - account_name=$(echo ${ENV_CONFIG} | jq -c -r .${ENVIRONMENT}.account_name)
      - assumed_role=$(aws sts assume-role --role-arn "arn:aws:iam::${account_id}:role/${APPLICATION}-${ENVIRONMENT}-codebase-pipeline-deploy" --role-session-name "${ENVIRONMENT}-codebase-pipeline-deploy")
      - export AWS_ACCESS_KEY_ID=$(echo $assumed_role | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $assumed_role | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $assumed_role | jq -r .Credentials.SessionToken)

      # Set an AWS profile for Terraform
      - PROFILE_NAME="${account_name}"
      - aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}" --profile "${PROFILE_NAME}"
      - aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}" --profile "${PROFILE_NAME}"
      - aws configure set aws_session_token "${AWS_SESSION_TOKEN}" --profile "${PROFILE_NAME}"
      - aws configure set region "eu-west-2" --profile "${PROFILE_NAME}"
      - aws configure set output "json" --profile "${PROFILE_NAME}"
      - export AWS_PROFILE="${PROFILE_NAME}"

      # Generate service Terraform and run plan
      - cd "${CODEBUILD_SRC_DIR}"
      - local_ecs_service_path=../../../../platform-tools/terraform/ecs-service
      - TERRAFORM_MODULE_SOURCE_TYPE=OVERRIDE TERRAFORM_ECS_SERVICE_MODULE_SOURCE_OVERRIDE=${local_ecs_service_path} platform-helper internal service generate --env "${ENVIRONMENT}" --name "${SERVICE}"
      - cd "${CODEBUILD_SRC_DIR}/terraform/services/${ENVIRONMENT}/${SERVICE}"
      - terraform init
      - terraform plan

      # Send notification for stage waiting approval
      - |
        if [ $? -eq 0 ]; then
          MESSAGE=":terraform::large_orange_circle: WAITING APPROVAL - Service infrastructure plan for \`${SERVICE}\` in environment \`${ENVIRONMENT}\` <https://${AWS_REGION}.console.aws.amazon.com/codesuite/codebuild/${AWS_ACCOUNT_ID}/projects/${BUILD_ID_PREFIX}/build/${CODEBUILD_BUILD_ID}/?region=${AWS_REGION}|Build log> | <${PIPELINE_EXECUTION_URL}|Pipeline execution>"
          platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}"
        else
          deploy_status="FAILED"
          STATUS_EMOJI=":red_circle:"
          STATUS_TEXT="FAILED"
          echo "Error: Terraform plan FAILED | tee output.log
          exit 1
        fi

  post_build:
    commands:
      - |
        if [ "${CODEBUILD_BUILD_SUCCEEDING}" != "1" ]; then
          BUILD_ID_PREFIX=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)          
          MESSAGE=":terraform::red_circle: FAILED - Service infrastructure plan for service \`${SERVICE}\` in environment \`${ENVIRONMENT}\` - $(cat output.log) - <https://eu-west-2.console.aws.amazon.com/codesuite/codebuild/${AWS_ACCOUNT_ID}/projects/${BUILD_ID_PREFIX}/build/${CODEBUILD_BUILD_ID}/?region=eu-west-2|Build log>"
          platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}"
        fi
