version: 0.2

env:
  variables:
    DEPLOY_TIMEOUT: 1800
  parameter-store:
    SLACK_TOKEN: /codebuild/slack_oauth_token

phases:
  install:
    commands:
      - pip install yq dbt-platform-helper --quiet
      - curl -s -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 > /usr/local/bin/regctl
      - chmod +x /usr/local/bin/regctl

  build:
    commands:
      - set -e

      - UPPERCASE_SERVICE=$(echo "${SERVICE}" | tr '[:lower:]' '[:upper:]')
      - UPPERCASE_TAG=$(echo "${IMAGE_TAG}" | tr '[:lower:]' '[:upper:]')

      # Check if the specified image tag exists
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - |
        if ! docker manifest inspect "${REPOSITORY_URL}:${IMAGE_TAG}" > /dev/null 2>&1; then
          echo "Error: Image tag ${IMAGE_TAG} not found in repository ${REPOSITORY_URL}" | tee output.log
          exit 1
        fi

      # Check environment exists in config
      - |
        if [ $(echo $ENV_CONFIG | jq 'has('\"${ENVIRONMENT}\"')') == "false" ]; then
          echo "Error: Environment ${ENVIRONMENT} not listed in environment config" | tee output.log
          exit 1
        fi

      # Construct Slack message env vars
      - SLACK_REF=$(regctl image config "${REPOSITORY_URL}:${IMAGE_TAG}" | jq -r '.config.Labels."uk.gov.trade.digital.build.timestamp"')
      - |
        if [ "${SLACK_REF}" = "null" ] || [ -z "${SLACK_REF}" ]; then
          echo "Error: Image contains no timestamp label" | tee output.log
          exit 1
        fi

      # Extract the pipeline name from CODEBUILD_INITIATOR default env var
      - |
        if [[ "${CODEBUILD_INITIATOR}" == codepipeline/* ]]; then 
          PIPELINE_NAME=$(echo "${CODEBUILD_INITIATOR}" | cut -d'/' -f2) 
        else 
          echo "Error: Build not triggered by CodePipeline." | tee output.log
          exit 1 
        fi

      # Construct the pipeline execution URL
      - PIPELINE_EXECUTION_URL="https://${AWS_REGION}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${PIPELINE_NAME}/executions/${PIPELINE_EXECUTION_ID}"
      - BUILD_ID_PREFIX=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)

      - |
        MESSAGE=":rocket: STARTED - Deployment of ${UPPERCASE_SERVICE} service - Tag: ${UPPERCASE_TAG} - <https://${AWS_REGION}.console.aws.amazon.com/codesuite/codebuild/${AWS_ACCOUNT_ID}/projects/${BUILD_ID_PREFIX}/build/${CODEBUILD_BUILD_ID}/?region=${AWS_REGION}|Build log> | <${PIPELINE_EXECUTION_URL}|Pipeline execution url>"

      - platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}"

      # Build image uri
      - task_family="${APPLICATION}-${ENVIRONMENT}-${SERVICE}"
      - cluster="${APPLICATION}-${ENVIRONMENT}"
      - image_uri="${REPOSITORY_URL}:${IMAGE_TAG}"

      # Assume environment role
      - account_id=$(echo ${ENV_CONFIG} | jq -c -r .${ENVIRONMENT}.account)
      - assumed_role=$(aws sts assume-role --role-arn "arn:aws:iam::${account_id}:role/${APPLICATION}-${ENVIRONMENT}-codebase-pipeline-deploy" --role-session-name "${ENVIRONMENT}-codebase-pipeline-deploy")
      - export AWS_ACCESS_KEY_ID=$(echo $assumed_role | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $assumed_role | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $assumed_role | jq -r .Credentials.SessionToken)

      # Get service name
      - service_name=$(aws ecs list-services --cluster "${cluster}" | jq -r '.serviceArns[] | select(test("'${cluster}'-'${SERVICE}'($|-Service.*)"))' | cut -d '/' -f3)

      # Update task definition
      - task_definition=$(aws ecs describe-task-definition --task-definition "${task_family}")
      - new_task_definition=$(echo ${task_definition} | jq '.taskDefinition | .containerDefinitions |= map(if .name == '\"${SERVICE}\"' then .image = '\"${image_uri}\"' else . end) | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) |  del(.registeredAt)  | del(.registeredBy)')
      - new_task_info=$(aws ecs register-task-definition --cli-input-json "${new_task_definition}")
      - new_revision=$(echo ${new_task_info} | jq '.taskDefinition.revision')

      # Get desired task count
      - count=0
      - cd "${CODEBUILD_SRC_DIR}"

      # If count is a range, get the first value otherwise get count
      - |
        if [ $(yq '.count | type == "object"' copilot/${SERVICE}/manifest.yml) == "true" ]; then
          count=$(yq '.count.range' copilot/${SERVICE}/manifest.yml | tr -d '"' | cut -d '-' -f1)
        else
          count=$(yq '.count' copilot/${SERVICE}/manifest.yml)
        fi

      # Check for environment overrides
      - |
        if [ $(yq '.environments.'${ENVIRONMENT}'.count | type == "object"' copilot/${SERVICE}/manifest.yml) == "true" ]; then
          env_count=$(yq '.environments.'${ENVIRONMENT}'.count.range' copilot/${SERVICE}/manifest.yml | tr -d '"' | cut -d '-' -f1)
        else
          env_count=$(yq '.environments.'${ENVIRONMENT}'.count' copilot/${SERVICE}/manifest.yml)
        fi

      - |
        if [[ "${env_count}" != "null" ]]; then
          count=${env_count}
        fi

      # Start deployment
      - echo "Deploying ${image_uri} to ${service_name} in ${cluster} with task count ${count}"
      - start=$( date +%s )
      - deploy_status="IN_PROGRESS"
      - aws ecs update-service --cluster "${cluster}" --service "${service_name}" --task-definition "${task_family}:${new_revision}" --desired-count ${count} > /dev/null 2>&1

      # Check deployment status
      - |
        while [[ "${deploy_status}" == "IN_PROGRESS" || "${deploy_status}" == "PENDING" || "${deploy_status}" == "ROLLBACK_IN_PROGRESS" || "${deploy_status}" == "null" ]];
        do
          sleep 10
          now=$( date +%s )
          elapsed=$(( now-start ))

          deploy_status=$(aws ecs list-service-deployments --cluster "${cluster}" --service "${service_name}" --created-at "after=${start}" | jq -r '.serviceDeployments[0].status')
        
          if [[ "${deploy_status}" == "null" ]]; then deploy_status="PENDING"; fi
          echo "Deployment status after ${elapsed} seconds: ${deploy_status}"

          if [[ ${elapsed} -gt ${DEPLOY_TIMEOUT} ]]; then
            echo "Error: Deployment not completed within ${DEPLOY_TIMEOUT} seconds timeout" | tee output.log
            exit 1
          fi
        done

      # Check deployment success
      - |
        case "${deploy_status}" in
          SUCCESSFUL)
            STATUS_EMOJI=":large_green_circle:"
            STATUS_TEXT="COMPLETE"
            ;;
          ROLLBACK_SUCCESSFUL)
            STATUS_EMOJI=":red_circle:"
            STATUS_TEXT="FAILED"
            ;;
          ROLLBACK_FAILED)
            STATUS_EMOJI=":red_circle::warning:"
            STATUS_TEXT="FAILED"
            ;;
          *)
            STATUS_EMOJI=":large_blue_circle:"
            STATUS_TEXT="STOP_REQUESTED/STOPPED/PENDING/IN_PROGRESS"
            ;;
        esac

      # Send notification on successful deployment or exit with an error code
      - |
        if [ "${deploy_status}" == "SUCCESSFUL" ]; then
          MESSAGE="${STATUS_EMOJI} ${STATUS_TEXT} - Deployment of ${UPPERCASE_TAG} to ${UPPERCASE_SERVICE} service - ${deploy_status} - <${PIPELINE_EXECUTION_URL}|Pipeline execution url>"
          platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}"
        else
          echo "Error: Deployment status is ${deploy_status}" | tee output.log
          exit 1
        fi

  post_build:
    commands:
      - |
        if [ "${CODEBUILD_BUILD_SUCCEEDING}" != "1" ]; then
          BUILD_ID_PREFIX=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)          
          MESSAGE=":red_circle::warning: Deployment of ${UPPERCASE_TAG} to ${UPPERCASE_SERVICE} service - FAILED $(cat output.log) - <https://eu-west-2.console.aws.amazon.com/codesuite/codebuild/${AWS_ACCOUNT_ID}/projects/${BUILD_ID_PREFIX}/build/${CODEBUILD_BUILD_ID}/?region=eu-west-2|Build log>"
          
          platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}"
        fi
