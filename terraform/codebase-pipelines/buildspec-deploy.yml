version: 0.2

env:
  variables:
    DEPLOY_TIMEOUT: 1800
  parameter-store:
    SLACK_TOKEN: /codebuild/slack_oauth_token

phases:
  install:
    commands:
      # Install cli tools
      ## Copilot
      - COPILOT_VERSION=`cat .copilot-version`
      - curl -s -qL -o copilot-binary https://ecs-cli-v2-release.s3.amazonaws.com/copilot-linux-v${COPILOT_VERSION}
      - chmod +x copilot-binary
      - mkdir -p /codebuild/bin
      - mv copilot-binary /codebuild/bin/copilot
      - export PATH=$PATH:/codebuild/bin
      ## regctl for listing images
      - curl -s -L https://github.com/regclient/regclient/releases/latest/download/regctl-linux-amd64 > /usr/local/bin/regctl
      - chmod +x /usr/local/bin/regctl

      # Install Platform Helper
      ## Clone platform-tools
      - cd "${CODEBUILD_SRC_DIR}"
      - codestar_connection_id=$(echo "${CODESTAR_CONNECTION_ARN##*/}")
      - export GIT_CLONE_BASE_URL="https://codestar-connections.${AWS_REGION}.amazonaws.com/git-http/${AWS_ACCOUNT_ID}/${AWS_REGION}/$codestar_connection_id/uktrade"
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      - git config --global advice.detachedHead false
      - git clone "${GIT_CLONE_BASE_URL}/platform-tools.git" --branch "${PLATFORM_HELPER_VERSION}" --depth 1 platform-tools
      - cd "${CODEBUILD_SRC_DIR}/platform-tools"
      - 'echo -e "\nCurrent platform-tools branch/commit: $(git rev-parse --abbrev-ref HEAD)/$(git rev-parse HEAD)"'
      ## Set up python venv
      - echo -e "Set up venv"
      - rm -rf venv
      - python -m venv --copies venv
      - echo -e "\nUpdating paths"
      - echo -e "\nActivating virtual environment"
      - source venv/bin/activate
      ## yq for yaml processing
      - pip install yq --quiet
      ## Build platform-helper
      - echo -e "\n\n### Build and install platform-helper cloned from ${PLATFORM_HELPER_VERSION}\n"
      - echo -e "Installing dependencies"
      - pip install poetry
      - poetry install
      - echo -e "\nBuild platform-helper\n"
      - poetry build --no-interaction --format sdist --no-ansi --local-version ${PLATFORM_HELPER_VERSION}
      - echo -e "\nInstall platform-helper\n"
      - pip install "dist/$(ls -t1 dist | head -1)"
      - echo -e "\nCheck which platform-helper\n"
      - which platform-helper
      - echo -e "\nCheck platform-helper --version\n"
      - platform-helper --version

  build:
    commands:
      - set -e

      # Check if the specified image tag exists
      - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      - |
        if ! docker manifest inspect "${REPOSITORY_URL}:${IMAGE_TAG}" > /dev/null 2>&1; then
          echo "Error: Image tag ${IMAGE_TAG} not found in repository ${REPOSITORY_URL}" | tee output.log
          exit 1
        fi

      # Check environment exists in config
      - |
        if [ $(echo $ENV_CONFIG | jq 'has('\"${ENVIRONMENT}\"')') == "false" ]; then
          echo "Error: Environment ${ENVIRONMENT} not listed in environment config" | tee output.log
          exit 1
        fi

      # Retrieve all tags from the image in ECR
      - |
        if [[ "$REPOSITORY_URL" == public.ecr.aws/* ]]; then
          REPOSITORY_NAME=$(echo "$REPOSITORY_URL" | cut -d'/' -f3-)
          ECR_TAGS=$(aws ecr-public describe-images --region us-east-1 --repository-name ${REPOSITORY_NAME} --image-ids imageTag=${IMAGE_TAG} --query 'imageDetails[0].imageTags')
        else
          REPOSITORY_NAME=$(echo "$REPOSITORY_URL" | cut -d'/' -f2-)
          ECR_TAGS=$(aws ecr describe-images --repository-name ${REPOSITORY_NAME} --image-ids imageTag=${IMAGE_TAG} --query 'imageDetails[0].imageTags')
        fi

      # Set tag to deploy to commit-* tag from ECR image
      - DEPLOY_TAG=$(echo ${ECR_TAGS} | jq -r '.[] | select(startswith("commit-"))')

      # Fall back on IMAGE_TAG
      - |
        if [[ -z "${DEPLOY_TAG}" ]]; then
          DEPLOY_TAG=${IMAGE_TAG}
        fi

      - echo "Deploying image with tag ${DEPLOY_TAG} to service ${SERVICE} in environment ${ENVIRONMENT}"

      # Construct Slack message env vars
      - SLACK_REF=$(regctl image config "${REPOSITORY_URL}:${DEPLOY_TAG}" | jq -r '.config.Labels."uk.gov.trade.digital.build.timestamp"')
      - |
        if [ "${SLACK_REF}" = "null" ] || [ -z "${SLACK_REF}" ]; then
          echo "Error: Image contains no timestamp label" | tee output.log
          exit 1
        fi

      # Extract the pipeline name from CODEBUILD_INITIATOR default env var
      - |
        if [[ "${CODEBUILD_INITIATOR}" == codepipeline/* ]]; then 
          PIPELINE_NAME=$(echo "${CODEBUILD_INITIATOR}" | cut -d'/' -f2) 
        else 
          echo "Error: Build not triggered by CodePipeline." | tee output.log
          exit 1 
        fi

      # Construct the pipeline execution URL
      - PIPELINE_EXECUTION_URL="https://${AWS_REGION}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${PIPELINE_NAME}/executions/${PIPELINE_EXECUTION_ID}"
      - BUILD_ID_PREFIX=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)

      # Send deployment starting Slack notification
      - |
        MESSAGE=":rocket: STARTED - Deployment of tag \`${DEPLOY_TAG}\` to service \`${SERVICE}\` for environment \`${ENVIRONMENT}\` <https://${AWS_REGION}.console.aws.amazon.com/codesuite/codebuild/${AWS_ACCOUNT_ID}/projects/${BUILD_ID_PREFIX}/build/${CODEBUILD_BUILD_ID}/?region=${AWS_REGION}|Build log> | <${PIPELINE_EXECUTION_URL}|Pipeline execution>"
      - platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}"

      # Run Copilot package command and clean the manifest output
      - copilot svc package --env "${ENVIRONMENT}" --name "${SERVICE}" | yq .Metadata.Manifest | jq -r . | yq 'del(.image.location)' > new.yml

      # Assume environment role
      - account_id=$(echo ${ENV_CONFIG} | jq -c -r .${ENVIRONMENT}.account)
      - assumed_role=$(aws sts assume-role --role-arn "arn:aws:iam::${account_id}:role/${APPLICATION}-${ENVIRONMENT}-codebase-pipeline-deploy" --role-session-name "${ENVIRONMENT}-codebase-pipeline-deploy")
      - export AWS_ACCESS_KEY_ID=$(echo $assumed_role | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $assumed_role | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $assumed_role | jq -r .Credentials.SessionToken)

      # Get the current CloudFormation template and clean it for comparison
      - aws cloudformation get-template --stack-name "${APPLICATION}-${ENVIRONMENT}-${SERVICE}" --output json --query TemplateBody | jq -r . | yq .Metadata.Manifest | jq -r . | yq 'del(.image.location)' > current.yml

      # Compare deployed copilot manifest with incoming deployment
      - diff new.yml current.yml; DIFF_EXIT_CODE=$?
      - echo "DIFF EXIT CODE IS ${DIFF_EXIT_CODE}"

      # If there are differences in the copilot manifest use a copilot deployment
      - |
        if [[ $DIFF_EXIT_CODE -ne 0 ]]; then
          echo "Differences detected between deployed and committed service templates, running copilot svc deploy..."

          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
                
          STATUS_EMOJI=":large_green_circle:"
          STATUS_TEXT="COMPLETE"
        
          IMAGE_TAG=${DEPLOY_TAG} copilot svc deploy --env "${ENVIRONMENT}" --name "${SERVICE}" --force

          if [ $? -ne 0 ]; then
            STATUS_EMOJI=":red_circle::warning:"
            STATUS_TEXT="FAILED"
          fi
          MESSAGE="${STATUS_EMOJI} ${STATUS_TEXT} - Deployment of tag \`${DEPLOY_TAG}\` to service \`${SERVICE}\` for environment \`${ENVIRONMENT}\` <https://${AWS_REGION}.console.aws.amazon.com/codesuite/codebuild/${AWS_ACCOUNT_ID}/projects/${BUILD_ID_PREFIX}/build/${CODEBUILD_BUILD_ID}/?region=${AWS_REGION}|Build log> | <${PIPELINE_EXECUTION_URL}|Pipeline execution>"
          platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}"
        else
          # Build image URI
          task_family="${APPLICATION}-${ENVIRONMENT}-${SERVICE}"
          cluster="${APPLICATION}-${ENVIRONMENT}"
          image_uri="${REPOSITORY_URL}:${DEPLOY_TAG}"
        
          # Get service name
          service_name=$(aws ecs list-services --cluster "${cluster}" | jq -r '.serviceArns[] | select(test("'${cluster}'-'${SERVICE}'($|-Service.*)"))' | cut -d '/' -f3)
        
          # Update task definition
          task_definition=$(aws ecs describe-task-definition --task-definition "${task_family}")
          new_task_definition=$(echo ${task_definition} | jq '.taskDefinition | .containerDefinitions |= map(if .name == '\"${SERVICE}\"' then .image = '\"${image_uri}\"' else . end) | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) |  del(.registeredAt)  | del(.registeredBy)')
          new_task_info=$(aws ecs register-task-definition --cli-input-json "${new_task_definition}")
          new_revision=$(echo ${new_task_info} | jq '.taskDefinition.revision')

          # Get desired task count
          count=0
          cd "${CODEBUILD_SRC_DIR}"

          # If count is a range, get the first value otherwise get count
          if [ $(yq '.count | type == "object"' copilot/${SERVICE}/manifest.yml) == "true" ]; then
            count=$(yq '.count.range' copilot/${SERVICE}/manifest.yml | tr -d '"' | cut -d '-' -f1)
          else
            count=$(yq '.count' copilot/${SERVICE}/manifest.yml)
          fi

          # Check for environment overrides
          if [ $(yq '.environments.'${ENVIRONMENT}'.count | type == "object"' copilot/${SERVICE}/manifest.yml) == "true" ]; then
            env_count=$(yq '.environments.'${ENVIRONMENT}'.count.range' copilot/${SERVICE}/manifest.yml | tr -d '"' | cut -d '-' -f1)
          else
            env_count=$(yq '.environments.'${ENVIRONMENT}'.count' copilot/${SERVICE}/manifest.yml)
          fi

          if [[ "${env_count}" != "null" ]]; then
            count=${env_count}
          fi

          # Start deployment
          start=$( date +%s )
          deploy_status="IN_PROGRESS"
          aws ecs update-service --cluster "${cluster}" --service "${service_name}" --task-definition "${task_family}:${new_revision}" --desired-count ${count} > /dev/null 2>&1

          # Check deployment status
          while [[ "${deploy_status}" == "IN_PROGRESS" || "${deploy_status}" == "PENDING" || "${deploy_status}" == "ROLLBACK_IN_PROGRESS" || "${deploy_status}" == "null" ]];
          do
            sleep 10
            now=$( date +%s )
            elapsed=$(( now-start ))

            deploy_status=$(aws ecs list-service-deployments --cluster "${cluster}" --service "${service_name}" --created-at "after=${start}" | jq -r '.serviceDeployments[0].status')
          
            if [[ "${deploy_status}" == "null" ]]; then deploy_status="PENDING"; fi
            echo "Deployment status after ${elapsed} seconds: ${deploy_status}"

            if [[ ${elapsed} -gt ${DEPLOY_TIMEOUT} ]]; then
              echo "Error: Deployment not completed within ${DEPLOY_TIMEOUT} seconds timeout" | tee output.log
              exit 1
            fi
          done

          # Check deployment success
          case "${deploy_status}" in
            SUCCESSFUL)
              STATUS_EMOJI=":large_green_circle:"
              STATUS_TEXT="COMPLETE"
              ;;
            ROLLBACK_SUCCESSFUL)
              STATUS_EMOJI=":red_circle:"
              STATUS_TEXT="FAILED"
              ;;
            ROLLBACK_FAILED)
              STATUS_EMOJI=":red_circle::warning:"
              STATUS_TEXT="FAILED"
              ;;
            *)
              STATUS_EMOJI=":large_blue_circle:"
              STATUS_TEXT="STOP_REQUESTED/STOPPED/PENDING/IN_PROGRESS"
              ;;
          esac

          # Send notification on successful deployment or exit with an error code
          if [ "${deploy_status}" == "SUCCESSFUL" ]; then
            MESSAGE="${STATUS_EMOJI} ${STATUS_TEXT} - Deployment of tag \`${DEPLOY_TAG}\` to service \`${SERVICE}\` for environment \`${ENVIRONMENT}\` <https://${AWS_REGION}.console.aws.amazon.com/codesuite/codebuild/${AWS_ACCOUNT_ID}/projects/${BUILD_ID_PREFIX}/build/${CODEBUILD_BUILD_ID}/?region=${AWS_REGION}|Build log> | <${PIPELINE_EXECUTION_URL}|Pipeline execution>"
            platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}"
          else
            echo "Error: Deployment status is ${deploy_status}" | tee output.log
            exit 1
          fi
        fi

  post_build:
    commands:
      - |
        if [[ -z "${DEPLOY_TAG}" ]]; then
          DEPLOY_TAG=${IMAGE_TAG}
        fi
      - |
        if [ "${CODEBUILD_BUILD_SUCCEEDING}" != "1" ]; then
          BUILD_ID_PREFIX=$(echo $CODEBUILD_BUILD_ID | cut -d':' -f1)          
          MESSAGE=":red_circle::warning: FAILED - Deployment of tag \`${DEPLOY_TAG}\` to service \`${SERVICE}\` for environment \`${ENVIRONMENT}\` - $(cat output.log) - <https://eu-west-2.console.aws.amazon.com/codesuite/codebuild/${AWS_ACCOUNT_ID}/projects/${BUILD_ID_PREFIX}/build/${CODEBUILD_BUILD_ID}/?region=eu-west-2|Build log>"
          platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}"
        fi
