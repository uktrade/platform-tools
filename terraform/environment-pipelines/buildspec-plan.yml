version: 0.2

env:
  parameter-store:
    SLACK_TOKEN: /codebuild/slack_oauth_token
  exported-variables:
    - BUILD_ID

phases:
  install:
    commands:
      - export PATH="${CODEBUILD_SRC_DIR}/build-tools/bin:$PATH"
      - export PYTHONPATH="${CODEBUILD_SRC_DIR}/build-tools"
  build:
    commands:
      - set -e
      - echo "Working on environment ${ENVIRONMENT}"

      # Cancel pending approvals to prevent stale plans being approved
      - echo "Cancelling any pending approvals for ${APPLICATION}-${ENVIRONMENT}-environment-pipeline"
      - PIPELINE_STATE=$(aws codepipeline get-pipeline-state --name "${APPLICATION}-${PIPELINE_NAME}-environment-pipeline")
      - PIPELINE_APPROVAL_EXECID=$(echo $PIPELINE_STATE | jq  --arg stage "Approve-${ENVIRONMENT}" -r '.stageStates[] | select(.stageName == $stage and .latestExecution.status == "InProgress") | .latestExecution.pipelineExecutionId')
      - |
        if [ -n "${PIPELINE_APPROVAL_EXECID}" ]; then
          aws codepipeline stop-pipeline-execution --pipeline-name "${APPLICATION}-${PIPELINE_NAME}-environment-pipeline" --pipeline-execution-id $PIPELINE_APPROVAL_EXECID --abandon --reason "Abandoning previous pipeline execution pending approval to run terraform plan" 
        fi

      # Send Slack notification
      - echo "Terraform Plan Phase"
      - platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "Starting terraform plan phase for the ${ENVIRONMENT} environment."

      # Override platform helper version if provided
      - |
        if [ "${PLATFORM_HELPER_VERSION_OVERRIDE}" == "NONE" ]; then
          export PLATFORM_HELPER_VERSION_OVERRIDE=""
        fi

      # Assume environment specific role
      - assumed_role=$(aws sts assume-role --role-arn "arn:aws:iam::${ACCOUNT_ID}:role/${APPLICATION}-${ENVIRONMENT}-environment-pipeline-deploy" --role-session-name "${ENVIRONMENT}-environment-pipeline-deploy")
      - export AWS_ACCESS_KEY_ID=$(echo $assumed_role | jq -r .Credentials.AccessKeyId)
      - export AWS_SECRET_ACCESS_KEY=$(echo $assumed_role | jq -r .Credentials.SecretAccessKey)
      - export AWS_SESSION_TOKEN=$(echo $assumed_role | jq -r .Credentials.SessionToken)

      # Terraform plan
      - platform-helper environment generate-terraform --name "${ENVIRONMENT}"
      - cd terraform/environments/${ENVIRONMENT}
      - terraform init
      - terraform plan -out=plan.tfplan
  post_build:
    commands:
      - export BUILD_ID="$CODEBUILD_BUILD_ID"
      - |
        if [ "${CODEBUILD_BUILD_SUCCEEDING}" == "1" ]; then
          MESSAGE="Terraform plan phase complete for the ${ENVIRONMENT} environment."
          if [ "${NEEDS_APPROVAL}" == "yes" ]; then
            MESSAGE="${MESSAGE} Waiting for approval for the ${ENVIRONMENT} environment."
          fi
          ADDITIONAL_OPTIONS=""
        else
          MESSAGE=":alert: Terraform plan phase FAILED for the ${ENVIRONMENT} environment."
          ADDITIONAL_OPTIONS="--send-to-main-channel true"
        fi
      - platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "${MESSAGE}" ${ADDITIONAL_OPTIONS}
artifacts:
  files:
    - "**/*"
