version: 0.2

env:
  parameter-store:
    SLACK_TOKEN: /codebuild/slack_oauth_token
  variables:
    TERRAFORM_VERSION: 1.8.1
  exported-variables:
    - SLACK_REF

phases:
  install:
    commands:
      - set -e
      - pip install yq --quiet
      - echo "Deploying ${APPLICATION} environments"
      - |
          if [ ! -f .copilot-version ]; then
            echo "Cannot find .copilot-version file"
            exit 1
          fi
      - COPILOT_VERSION=`cat .copilot-version`
      - cd "${CODEBUILD_SRC_DIR}"
      - |
          if [ "${PLATFORM_HELPER_VERSION_OVERRIDE}" == "NONE" ]; then
            echo "Install platform-helper version from platform-config default version"
            REQUIRED_VERSION=$(yq -r '.default_versions.["platform-helper"]' platform-config.yml)
          else
            REQUIRED_VERSION="${PLATFORM_HELPER_VERSION_OVERRIDE}"
          fi
      - COMMIT_TYPE=$(python -c "import re, sys; print('tag' if re.match(r'\\d+\\.\\d+\\.\\d+', '${REQUIRED_VERSION}') else 'commit')")
      - echo "Installing build tools"
      - mkdir ./build-tools

      # Install platform-helper
      - echo "Installing platform-helper from reference ${REQUIRED_VERSION}"
      ## Clone platform-tools:
      - echo -e "\nGet CodeStar connection details"
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      - codestar_connection_id=$(echo "${CODESTAR_CONNECTION_ARN##*/}")
      - export GIT_CLONE_BASE_URL="https://codestar-connections.${AWS_REGION}.amazonaws.com/git-http/${AWS_ACCOUNT_ID}/${AWS_REGION}/$codestar_connection_id/uktrade"
      - git clone "${GIT_CLONE_BASE_URL}/platform-tools.git" --branch "${REQUIRED_VERSION}" --depth 1 platform-tools
      ## Build platform-helper
      - cd platform-tools
      - echo -e "\n\n### Build and install platform-helper cloned from ${REQUIRED_VERSION}\n"
      - echo -e "Installing dependencies"
      - pip install poetry
      - poetry install
      - echo -e "\nBuild platform-helper\n"
      - poetry build --no-interaction --format sdist --no-ansi --local-version ${REQUIRED_VERSION}
      - echo -e "\nInstall platform-helper\n"
      - most_recent_built_wheel_package=$(ls -t1 dist | grep ".whl" | head -1)
      - pip install "dist/${most_recent_built_wheel_package}"
      - echo -e "\nCheck which platform-helper\n"
      - which platform-helper
      - echo -e "\nCheck platform-helper --version\n"
      - platform-helper --version
      - |
          if [ "${SLACK_THREAD_ID}" == "NONE" ]
          then
            export SLACK_REF=$(platform-helper notify environment-progress "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" \
            "*Pipeline ${PIPELINE_NAME}* is deploying ${APPLICATION} environments" \
            --build-arn "${CODEBUILD_BUILD_ARN}" \
            --repository "${REPOSITORY}" \
            --commit-sha "${CODEBUILD_RESOLVED_SOURCE_VERSION: -7}")
          else
            export SLACK_REF="${SLACK_THREAD_ID}"
          fi
      - echo "Build SLACK_REF is - ${SLACK_REF}"
      - cd bin
      - curl -s -qL -o terraform_install.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip terraform_install.zip
      - chmod +x terraform
      - rm terraform_install.zip
      - curl -s -qL -o copilot https://ecs-cli-v2-release.s3.amazonaws.com/copilot-linux-v${COPILOT_VERSION}
      - chmod +x copilot
      - platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "Starting install phase"
      - VERSION_OUTPUT+="\n$(terraform --version)"
      - VERSION_OUTPUT+="\n$(platform-helper --version)"
      - if [ "${COMMIT_TYPE}" != "tag" ]; then VERSION_OUTPUT+=" (from git ref ${REQUIRED_VERSION})"; fi
      - VERSION_OUTPUT+="\n$(python3 --version)"
      - VERSION_OUTPUT+="\n$(pip --version)"
      - echo -e "=============\nTool Versions\n-------------\n$VERSION_OUTPUT"
      - platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "${SLACK_REF}" "Install phase complete"
artifacts:
  files:
    - "**/*"
