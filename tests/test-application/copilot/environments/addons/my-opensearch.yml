# Generated by copilot-helper 0.1.26 / 2023-08-24 12:55:51
Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  PrivateSubnets:
    Type: String
  VpcId:
    Type: String

  # Other parameters...
  # Customize your RDS Postgres cluster by setting the default value of the following parameters.
  myOpensearchDBName:
    Type: String
    Description: The name of the initial database to be created.
    Default: main
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints

Mappings:
  myOpensearchEnvScalingConfigurationMap:
    
    staging:
      DBInstanceClass: 't3.medium.search'
      MultiAZ:  false 
      AllocatedStorage: 200
      MaxAllocatedStorage: 252
      StorageType:  gp3 

    
    development:
      DBInstanceClass: 't3.medium.search'
      MultiAZ:  false 
      AllocatedStorage: 200
      MaxAllocatedStorage: 252
      StorageType:  gp3 

    
    production:
      DBInstanceClass: 'm6g.xlarge.search'
      MultiAZ:  false 
      AllocatedStorage: 200
      MaxAllocatedStorage: 252
      StorageType:  gp3 

    

Resources:
  # Subnet group to control where the DB gets placed
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Group of subnets to place DB into
      SubnetIds: !Split [ ",", !Ref PrivateSubnets ]
  # Security group to add the DB to the VPC,
  # and to allow the Fargate containers to talk to DB
  myOpensearchSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group to access the DB cluster'
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "DB Security Group"
      VpcId: !Ref VpcId
  # Enable ingress from other ECS services created within the environment.
  DBIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from containers in my application to the DB cluster'
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from Fargate containers
      GroupId: !Ref 'myOpensearchSecurityGroup'
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup
  # The cluster itself.
  myOpensearchDBInstance:
    Metadata:
      'aws:copilot:description': 'DB cluster'
    Type: AWS::RDS::DBInstance
    Properties:
      AutoMinorVersionUpgrade: true
      EnablePerformanceInsights: true
      Engine: postgres
      EngineVersion: '13'
      DBInstanceClass: !FindInMap [myOpensearchEnvScalingConfigurationMap, !Ref Env, DBInstanceClass]
      AllocatedStorage: !FindInMap [myOpensearchEnvScalingConfigurationMap, !Ref Env, AllocatedStorage]
      MaxAllocatedStorage: !FindInMap [myOpensearchEnvScalingConfigurationMap, !Ref Env, MaxAllocatedStorage]
      StorageType: !FindInMap [myOpensearchEnvScalingConfigurationMap, !Ref Env, StorageType]
      MultiAZ: !FindInMap [myOpensearchEnvScalingConfigurationMap, !Ref Env, MultiAZ]
      AllowMajorVersionUpgrade: false
      BackupRetentionPeriod: 7
      DBName: !Ref myOpensearchDBName
      MasterUsername:
        !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myOpensearchRDSSecret, ":SecretString:username}}" ]]
      MasterUserPassword:
        !Join [ "",  [ '{{resolve:secretsmanager:', !Ref myOpensearchRDSSecret, ":SecretString:password}}" ]]
      DBSubnetGroupName: !Ref 'DBSubnetGroup'
      VPCSecurityGroups:
        - !Ref myOpensearchSecurityGroup
  myOpensearchRDSSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/MY_OPENSEARCH'
      Description: !Sub RDS main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: "password"
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16

  myOpensearchSecretRDSAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref myOpensearchRDSSecret
      TargetId: !Ref myOpensearchDBInstance
      TargetType: AWS::RDS::DBInstance
