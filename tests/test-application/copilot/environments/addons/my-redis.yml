# Generated by copilot-helper 0.1.26 / 2023-08-24 12:55:51
Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  PrivateSubnets:
    Type: String
  VpcId:
    Type: String

Mappings:
  myRedisEnvScalingConfigurationMap:
    # Create an entry for each environment
    
    staging:
      EngineVersion: '6.2'
      CacheNodeType: 'cache.t4g.medium'
      NumReplicas: 0
    
    development:
      EngineVersion: '6.2'
      CacheNodeType: 'cache.t4g.medium'
      NumReplicas: 0
    
    production:
      EngineVersion: '6.2'
      CacheNodeType: 'cache.m6g.large'
      NumReplicas: 2
    

  myRedisEngineVersionMap:
    '6.2':
      CacheParameterGroupFamily: 'redis6.x'
    '6.0':
      CacheParameterGroupFamily: 'redis6.x'
    '5.0.6':
      CacheParameterGroupFamily: 'redis5.0'
    '5.0.4':
      CacheParameterGroupFamily: 'redis5.0'
    '5.0.3':
      CacheParameterGroupFamily: 'redis5.0'
    '5.0.0':
      CacheParameterGroupFamily: 'redis5.0'
    '4.0.10':
      CacheParameterGroupFamily: 'redis4.0'
    '3.2.6':
      CacheParameterGroupFamily: 'redis3.2'

Conditions:
  myRedisHasAutomaticFailoverEnabled: !Not [!Equals [!FindInMap [myRedisEnvScalingConfigurationMap, !Ref Env, NumReplicas], 0]]

Resources:

  myRedisCacheParameterGroup:
    Type: 'AWS::ElastiCache::ParameterGroup'
    Properties:
      CacheParameterGroupFamily: !FindInMap
        - myRedisEngineVersionMap
        - !FindInMap [myRedisEnvScalingConfigurationMap, !Ref Env, EngineVersion]
        - CacheParameterGroupFamily
      Description: !Ref 'AWS::StackName'
      Properties: {}

  myRedisCacheSubnetGroupName:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      SubnetIds: !Split [ ",", !Ref PrivateSubnets ]

  myRedisSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        SourceSecurityGroupId: !Ref EnvironmentSecurityGroup

  myRedisReplicationGroup:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    Properties:
      ReplicationGroupDescription: !Ref 'AWS::StackName'
      AtRestEncryptionEnabled: true
      AutomaticFailoverEnabled: !If [myRedisHasAutomaticFailoverEnabled, true, false]
      MultiAZEnabled: !If [myRedisHasAutomaticFailoverEnabled, true, false]
      CacheNodeType: !FindInMap [myRedisEnvScalingConfigurationMap, !Ref Env, CacheNodeType]
      CacheParameterGroupName: !Ref myRedisCacheParameterGroup
      CacheSubnetGroupName: !Ref myRedisCacheSubnetGroupName
      Engine: redis
      EngineVersion: !FindInMap [myRedisEnvScalingConfigurationMap, !Ref Env, EngineVersion]
      NumNodeGroups: 1   # run in non clustered mode with 1 master and 0-5 replicas
      ReplicasPerNodeGroup: !FindInMap [myRedisEnvScalingConfigurationMap, !Ref Env, NumReplicas]
      PreferredMaintenanceWindow: 'sat:07:00-sat:08:00'
      SecurityGroupIds:
      - !Ref myRedisSecurityGroup

      TransitEncryptionEnabled: true
      # UpdatePolicy:
      #   UseOnlineResharding: true

  # Redis endpoint stored in SSM so that other `services` can retrieve the endpoint.
  myRedisEndpointAddressParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/MY_REDIS'   # Other services can retrieve the endpoint from this path.
      Type: String
      Value: !Sub
        - 'rediss://${url}:${port}'
        - url: !GetAtt 'myRedisReplicationGroup.PrimaryEndPoint.Address'
          port: !GetAtt 'myRedisReplicationGroup.PrimaryEndPoint.Port'
