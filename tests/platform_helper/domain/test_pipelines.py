from unittest.mock import Mock

from dbt_platform_helper.domain.pipelines import Pipelines


def test_pipeline_generate_with_empty_platform_config_yml_outputs_warning():
    mock_echo = Mock()
    mock_config_provider = Mock()
    mock_config_provider.load_and_validate_platform_config.return_value = {"application": "my-app"}
    pipelines = Pipelines(config_provider=mock_config_provider, echo=mock_echo)

    pipelines.generate(None, None)

    mock_echo.assert_called_once_with("No pipelines defined: nothing to do.", err=True, fg="yellow")


def test_pipeline_generate_with_non_empty_platform_config_but_no_pipelines_outputs_warning():
    mock_echo = Mock()
    mock_config_provider = Mock()
    mock_config_provider.load_and_validate_platform_config.return_value = {"environments": {}}
    pipelines = Pipelines(config_provider=mock_config_provider, echo=mock_echo)

    pipelines.generate(None, None)

    mock_echo.assert_called_once_with("No pipelines defined: nothing to do.", err=True, fg="yellow")


# @freeze_time("2024-10-28 12:00:00")
# @pytest.mark.parametrize(
#     "cli_terraform_platform_version, config_terraform_platform_version, expected_terraform_platform_version, cli_demodjango_branch, expected_demodjango_branch",
#     [  # config_terraform_platform_version sets the platform-config.yml to include the TPM version at platform-config.yml/default_versions/terraform-platform-modules
#         ("7", True, "7", None, None),  # Case with cli_terraform_platform_version
#         (
#                 None,
#                 True,
#                 "4.0.0",
#                 "demodjango-branch",
#                 "demodjango-branch",
#         ),  # Case with config_terraform_platform_version and specific branch
#         (None, True, "4.0.0", None, None),  # Case with config_terraform_platform_version
#         (None, None, "5", None, None),  # Case with default TPM version and without branch, defaults
#     ],
# )
# def test_generate_pipeline_command_generate_terraform_files_for_environment_pipeline_manifest(
#         fakefs,
#         cli_terraform_platform_version,
#         config_terraform_platform_version,
#         expected_terraform_platform_version,
#         cli_demodjango_branch,
#         expected_demodjango_branch,
#         platform_config_for_env_pipelines
# ):
#
#     app_name = "test-app"
#     if config_terraform_platform_version:
#         platform_config_for_env_pipelines["default_versions"] = {"terraform-platform-modules": "4.0.0"}
#
#     mock_echo = Mock()
#     mock_config_provider = Mock()
#     mock_config_provider.load_and_validate_platform_config.return_value = platform_config_for_env_pipelines
#     pipelines = Pipelines(config_provider=mock_config_provider, echo=mock_echo)
#     pipelines.generate(cli_terraform_platform_version, cli_demodjango_branch)
#     mock_codestar = Mock()
#     mock_codestar.return_value = f"arn:aws:codestar-connections:eu-west-2:1234567:connection/{app_name}"
#
#     assert_terraform(
#         app_name,
#         "platform-sandbox-test",
#         expected_terraform_platform_version,
#         expected_demodjango_branch,
#     )
#     assert_terraform(
#         app_name,
#         "platform-prod-test",
#         expected_terraform_platform_version,
#         expected_demodjango_branch,
#     )
#
#
# def assert_terraform(app_name, aws_account, expected_version, expected_branch):
#     expected_files_dir = Path(f"terraform/environment-pipelines/{aws_account}/main.tf")
#     assert expected_files_dir.exists()
#     content = expected_files_dir.read_text()
#     print(content)
#
#     assert "# WARNING: This is an autogenerated file, not for manual editing." in content
#     assert "# Generated by platform-helper v0.1-TEST / 2024-10-28 12:00:00" in content
#     assert f'profile                  = "{aws_account}"' in content
#     assert (
#             f"git::https://github.com/uktrade/terraform-platform-modules.git//environment-pipelines?depth=1&ref={expected_version}"
#             in content
#     )
#     assert f'application         = "{app_name}"' in content
#     expected_branch_value = expected_branch if expected_branch else "each.value.branch"
#     assert f"branch              = {expected_branch_value} in content"
#
