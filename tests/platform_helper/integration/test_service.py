import json
from pathlib import Path
from unittest.mock import MagicMock
from unittest.mock import Mock
from unittest.mock import create_autospec
from unittest.mock import patch

from freezegun import freeze_time

from dbt_platform_helper.domain.service import ServiceManger
from dbt_platform_helper.entities.semantic_version import SemanticVersion
from dbt_platform_helper.providers.config import ConfigProvider
from dbt_platform_helper.providers.config_validator import ConfigValidator
from dbt_platform_helper.providers.version import InstalledVersionProvider


@patch("dbt_platform_helper.domain.service.version", return_value="14.0.0")
@patch("dbt_platform_helper.providers.terraform_manifest.version", return_value="14.0.0")
@freeze_time("2025-01-16 13:00:00")
def test_generate(
    mock_version,
    fakefs,
    create_valid_platform_config_file,
    create_valid_service_config_file,
    mock_application,
):

    # Test setup
    load_application = Mock()
    load_application.return_value = mock_application
    mock_installed_version_provider = create_autospec(spec=InstalledVersionProvider, spec_set=True)
    mock_installed_version_provider.get_semantic_version.return_value = SemanticVersion(14, 0, 0)
    mock_config_validator = Mock(spec=ConfigValidator)
    mock_config_provider = ConfigProvider(
        mock_config_validator, installed_version_provider=mock_installed_version_provider
    )

    io = MagicMock()
    service_manager = ServiceManger(
        config_provider=mock_config_provider,
        io=io,
        load_application=load_application,
    )

    # Test execution
    service_manager.generate(environments=["development"], services=[])

    # Test Assertion
    expected_terraform = Path(f"terraform/services/development/web/main.tf.json")
    expected_yaml = Path(f"terraform/services/development/web/service-config.yml")

    assert expected_terraform.exists()
    assert expected_yaml.exists()

    content = expected_terraform.read_text()
    json_content = json.loads(content)

    assert (
        json_content["//"]
        == "Generated by platform-helper 14.0.0 / 2025-01-16 13:00:00. WARNING: This is an autogenerated file, not for manual editing."
    )
    assert json_content["locals"] == {
        "environment": "development",
        "image_tag": "tag-latest",
        "platform_config": '${yamldecode(file("../../../../platform-config.yml"))}',
        "application": '${local.platform_config["application"]}',
        "environments": '${local.platform_config["environments"]}',
        "env_config": '${{for name, config in local.environments: name => merge(lookup(local.environments, "*", {}), config)}}',
        "service_config": '${yamldecode(templatefile("./service-config.yml", {COPILOT_ENVIRONMENT_NAME = local.environment, IMAGE_TAG = local.image_tag}))}',
        "raw_env_config": '${local.platform_config["environments"]}',
        "combined_env_config": '${{for name, config in local.raw_env_config: name => merge(lookup(local.raw_env_config, "*", {}), config)}}',
        "service_deployment_mode": '${lookup(local.combined_env_config[local.environment], "service-deployment-mode", "copilot")}',
        "non_copilot_service_deployment_mode": '${local.service_deployment_mode == "dual-deploy-copilot-traffic" || local.service_deployment_mode == "dual-deploy-platform-traffic" || local.service_deployment_mode == "platform" ? 1 : 0}',
    }
    assert json_content["provider"] == {
        "aws": {
            "region": "eu-west-2",
            "profile": "non-prod-acc",
            "alias": "non-prod-acc",
            "shared_credentials_files": ["~/.aws/config"],
        },
    }
    assert json_content["terraform"] == {
        "required_version": "~> 1.8",
        "backend": {
            "s3": {
                "bucket": "terraform-platform-state-non-prod-acc",
                "key": "tfstate/services/web-development.tfstate",
                "region": "eu-west-2",
                "encrypt": True,
                "kms_key_id": "alias/terraform-platform-state-s3-key-non-prod-acc",
                "dynamodb_table": "terraform-platform-lockdb-non-prod-acc",
            },
        },
        "required_providers": {"aws": {"source": "hashicorp/aws", "version": "~> 5"}},
    }
    assert json_content["module"] == {
        "ecs-service": {
            "source": "git::git@github.com:uktrade/platform-tools.git//terraform/ecs-service?depth=1&ref=10.2.0",
            "count": "${local.non_copilot_service_deployment_mode}",
            "application": "${local.application}",
            "environment": "${local.environment}",
            "service_config": "${local.service_config}",
            "env_config": "${local.env_config}",
        },
    }

    # TODO check
    # not environment overrides in service-config
    # check environment overrides applied
