# Generated by copilot-helper v0.1-TEST / 2023-08-22 16:00:00
Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.

Mappings:
  myRdsDbEnvironmentConfigMap:
    development:
      DeletionPolicy: Delete
      SnapshotIdentifier: test-snapshot-id
    production:
      DeletionPolicy: Delete
      SnapshotIdentifier: ""

Conditions:
  myRdsDbUseSnapshot: !Not [!Equals [!FindInMap [myRdsDbEnvironmentConfigMap, !Ref Env, SnapshotIdentifier], ""]]

Resources:
  myRdsDbLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${App}-${Env}-${Name}-myRdsDb-rds-create-user"
      Handler: index.handler
      Runtime: python3.11
      Layers:
        - arn:aws:lambda:eu-west-2:763451185160:layer:python-postgres:1
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt myRdsDbLambdaFunctionExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue
            'Fn::Sub': "${App}-${Env}-myRdsDb-DBClusterSecurityGroupName"
        SubnetIds: 
          !Split 
            - ","
            - !ImportValue
              'Fn::Sub': "${App}-${Env}-myRdsDb-PrivateSubnetsName" 
      Code:
        ZipFile: |
          import json
          import logging
          import time
          from urllib import request
          from urllib.error import HTTPError
          import boto3
          import psycopg2
          from botocore.exceptions import ClientError
          logger = logging.getLogger(__name__)
          def drop_user(cursor, username):
              cursor.execute(f"SELECT * FROM pg_catalog.pg_user WHERE usename = '{username}'")
              if cursor.fetchone() is not None:
                  cursor.execute(f"GRANT {username} TO postgres")
                  cursor.execute(f"DROP OWNED BY {username}")
                  cursor.execute(f"DROP USER {username}")
          def create_db_user(conn, cursor, username, password, permissions):
              drop_user(cursor, username)
              cursor.execute(f"CREATE USER {username} WITH ENCRYPTED PASSWORD '%s'" % password)
              cursor.execute(f"GRANT {username} to postgres;")
              cursor.execute(f"GRANT {', '.join(permissions)} ON ALL TABLES IN SCHEMA public TO {username};")
              cursor.execute(
                  f"ALTER DEFAULT PRIVILEGES FOR USER {username} IN SCHEMA public GRANT {', '.join(permissions)} ON TABLES TO {username};"
              )
              conn.commit()
          def create_or_update_user_secret(ssm, user_secret_name, user_secret_string, event):
              user_secret_description = event["ResourceProperties"]["SecretDescription"]
              copilot_application = event["ResourceProperties"]["CopilotApplication"]
              copilot_environment = event["ResourceProperties"]["CopilotEnvironment"]
              user_secret = None
              try:
                  user_secret = ssm.put_parameter(
                      Name=user_secret_name,
                      Description=user_secret_description,
                      Value=json.dumps(user_secret_string),
                      Tags=[
                          {
                              "Key": "custom:cloudformation:stack-name",
                              "Value": event["StackId"].split("/")[1],
                          },
                          {"Key": "custom:cloudformation:logical-id", "Value": event["LogicalResourceId"]},
                          {"Key": "custom:cloudformation:stack-id", "Value": event["StackId"]},
                          {"Key": "copilot-application", "Value": copilot_application},
                          {"Key": "copilot-environment", "Value": copilot_environment},
                      ],
                      Type="String",
                  )
              except ClientError as error:
                  if error.response["Error"]["Code"] == "ParameterAlreadyExists":
                      user_secret = ssm.put_parameter(
                          Name=user_secret_name,
                          Description=user_secret_description,
                          Value=json.dumps(user_secret_string),
                          Overwrite=True,
                      )
              return user_secret
          def send(event, body, logger, headers):
              send = request.Request(event["ResponseURL"], data=body, headers=headers)
              send.get_method = lambda: "PUT"
              count = 0
              while count < 5:
                  count += 1
                  try:
                      request.urlopen(send)
                      break
                  except HTTPError as ex:
                      if count < 5:
                          logger.warning(f"{ex} [{ex.url}] - Retry {count}")
                      else:
                          logger.error(f"{ex} [{ex.url}]")
                      time.sleep(count * 5)
          # borrowed from https://github.com/awslabs/aws-cloudformation-templates/blob/master/aws/services/CloudFormation/MacrosExamples/StackMetrics/lambda/cfnresponse.py
          # tweaked to use requests library
          def send_response(
              event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False, reason=None
          ):
              responseUrl = event["ResponseURL"]
              print(responseUrl)
              responseBody = {}
              responseBody["Status"] = responseStatus
              responseBody["Reason"] = (
                  reason or "See the details in CloudWatch Log Stream: " + context.log_stream_name
              )
              responseBody["PhysicalResourceId"] = physicalResourceId or context.log_stream_name
              responseBody["StackId"] = event["StackId"]
              responseBody["RequestId"] = event["RequestId"]
              responseBody["LogicalResourceId"] = event["LogicalResourceId"]
              responseBody["NoEcho"] = noEcho
              responseBody["Data"] = responseData
              json_responseBody = json.dumps(responseBody)
              print("Response body:\n" + json_responseBody)
              headers = {"content-type": "", "content-length": str(len(json_responseBody))}
              send(event, json_responseBody.encode(), logger, headers)
          def handler(event, context):
              print("REQUEST RECEIVED:\n" + json.dumps(event))
              db_master_user_secret = event["ResourceProperties"]["MasterUserSecret"]
              user_secret_name = event["ResourceProperties"]["SecretName"]
              username = event["ResourceProperties"]["Username"]
              user_permissions = event["ResourceProperties"]["Permissions"]
              secrets_manager = boto3.client("secretsmanager")
              ssm = boto3.client("ssm")
              master_user = json.loads(
                  secrets_manager.get_secret_value(SecretId=db_master_user_secret)["SecretString"]
              )
              user_password = secrets_manager.get_random_password(
                  PasswordLength=16,
                  ExcludeCharacters='[]{}()"@/\;=?&`><:|#',
                  ExcludePunctuation=True,
                  IncludeSpace=False,
              )["RandomPassword"]
              user_secret_string = {
                  "username": username,
                  "password": user_password,
                  "engine": master_user["engine"],
                  "port": master_user["port"],
                  "dbname": master_user["dbname"],
                  "host": master_user["host"],
              }
              if "dbClusterIdentifier" in master_user.keys():
                  user_secret_string["dbClusterIdentifier"] = master_user["dbClusterIdentifier"]
              if "dbInstanceIdentifier" in master_user.keys():
                  user_secret_string["dbInstanceIdentifier"] = master_user["dbInstanceIdentifier"]
              conn = psycopg2.connect(
                  dbname=master_user["dbname"],
                  user=master_user["username"],
                  password=master_user["password"],
                  host=master_user["host"],
                  port=master_user["port"],
              )
              cursor = conn.cursor()
              response = {"Status": "SUCCESS"}
              try:
                  match event["RequestType"]:
                      case "Create":
                          create_db_user(conn, cursor, username, user_password, user_permissions)
                          response = {
                              **response,
                              "Data": create_or_update_user_secret(
                                  ssm, user_secret_name, user_secret_string, event
                              ),
                          }
                      case "Update":
                          create_db_user(conn, cursor, username, user_password, user_permissions)
                          response = {
                              **response,
                              "Data": create_or_update_user_secret(
                                  ssm, user_secret_name, user_secret_string, event
                              ),
                          }
                      case "Delete":
                          drop_user(cursor, username)
                          response = {**response, "Data": ssm.delete_parameter(Name=user_secret_name)}
                      case _:
                          response = {
                              "Status": "FAILED",
                              "Data": {"Error": f"""Invalid requestType of '${event["RequestType"]}'"""},
                          }
              except Exception as e:
                  response = {"Status": "FAILED", "Data": {"Error": str(e)}}
              cursor.close()
              conn.close()
              print(json.dumps(response, default=str))
              send_response(event, context, response["Status"], response["Data"], event["LogicalResourceId"])

  myRdsDbApplicationUser:
    Type: 'Custom::myRdsDbApplicationUser'
    DeletionPolicy: !FindInMap [myRdsDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt 'myRdsDbLambdaFunction.Arn'
      CopilotApplication: !Sub "${App}"
      CopilotEnvironment: !Sub "${Env}"
      MasterUserSecret: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-RdsSecretName"
      SecretDescription: !Sub  application user secret for ${AWS::StackName}
      SecretName: !Sub '/copilot/${App}/${Env}/${Name}/secrets/MY_RDS_DB_APPLICATION_USER'
      DefaultPublicRoute: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-DefaultPublicRouteName"
      InternetGateway: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-InternetGatewayName"
      InternetGatewayAttachment: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-InternetGatewayAttachmentName"
      PublicRouteTable: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-PublicRouteTableName"
      PublicSubnet1RouteTableAssociation:
        Fn::ImportValue: 
          !Sub "${App}-${Env}-myRdsDb-PublicSubnet1RouteTableAssociationName"
      PublicSubnet2RouteTableAssociation: 
        Fn::ImportValue: 
          !Sub "${App}-${Env}-myRdsDb-PublicSubnet2RouteTableAssociationName"
      Snapshot: !If [myRdsDbUseSnapshot, !FindInMap [myRdsDbEnvironmentConfigMap, !Ref Env, SnapshotIdentifier], ""]
      Username: 'application_user'
      Permissions:
        - 'SELECT'
        - 'INSERT'
        - 'UPDATE'
        - 'DELETE'
        - 'TRIGGER'
    # Resource based metadata block to ignore reference to resources in other addon templates. Do not remove.
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            # https://github.com/aws-cloudformation/cfn-lint/blob/main/docs/rules.md
            - E3005

  myRdsDbReadOnlyUser:
    Type: 'Custom::myRdsDbReadOnlyUser'
    DeletionPolicy: !FindInMap [myRdsDbEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt 'myRdsDbLambdaFunction.Arn'
      CopilotApplication: !Sub "${App}"
      CopilotEnvironment: !Sub "${Env}"
      MasterUserSecret: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-RdsSecretName"
      SecretDescription: !Sub Aurora read only user secret for ${AWS::StackName}
      SecretName: !Sub '/copilot/${App}/${Env}/${Name}/secrets/MY_RDS_DB_READ_ONLY_USER'
      DefaultPublicRoute: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-DefaultPublicRouteName"
      InternetGateway: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-InternetGatewayName"
      InternetGatewayAttachment: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-InternetGatewayAttachmentName"
      PublicRouteTable: 
        Fn::ImportValue:
          !Sub "${App}-${Env}-myRdsDb-PublicRouteTableName"
      PublicSubnet1RouteTableAssociation:
        Fn::ImportValue: 
          !Sub "${App}-${Env}-myRdsDb-PublicSubnet1RouteTableAssociationName"
      PublicSubnet2RouteTableAssociation: 
        Fn::ImportValue: 
          !Sub "${App}-${Env}-myRdsDb-PublicSubnet2RouteTableAssociationName"
      Snapshot: !If [myRdsDbUseSnapshot, !FindInMap [myRdsDbEnvironmentConfigMap, !Ref Env, SnapshotIdentifier], ""]
      Username: 'read_only_user'
      Permissions:
        - 'SELECT'
    # Resource based metadata block to ignore reference to resources in other addon templates. Do not remove.
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            # https://github.com/aws-cloudformation/cfn-lint/blob/main/docs/rules.md
            - E3005

  myRdsDbLambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${App}-${Env}-myRdsDb-user"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub "${App}-${Env}-myRdsDb-user"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'ssm:DeleteParameter'
                  - 'ssm:PutParameter'
                  - 'ssm:AddTagsToResource'
                  - 'kms:Decrypt'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:GetRandomPassword'
                  - 'secretsmanager:GetSecretValue'
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
