# Generated by platform-helper v0.1-TEST / 2023-08-22 16:00:00

Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  PrivateSubnets:
    Type: String
  VpcId:
    Type: String

Mappings:
  myOpensearchLongerEnvironmentConfigMap:
    development:
      EngineVersion: '2.3'
      InstanceType: 't3.medium.search'
      InstanceCount: 1
      DedicatedMaster: false
      VolumeSize: 200
      DeletionPolicy: Delete
    production:
      EngineVersion: '2.3'
      InstanceType: 't3.medium.search'
      InstanceCount: 1
      DedicatedMaster: false
      VolumeSize: 200
      DeletionPolicy: Delete

  myOpensearchLongerEngineVersionMap:
    '1.0':
      EngineVersion: 'OpenSearch_1.0'
    '1.1':
      EngineVersion: 'OpenSearch_1.1'
    '1.2':
      EngineVersion: 'OpenSearch_1.2'
    '1.3':
      EngineVersion: 'OpenSearch_1.3'
    '2.3':
      EngineVersion: 'OpenSearch_2.3'
    '2.5':
      EngineVersion: 'OpenSearch_2.5'
    '2.7':
      EngineVersion: 'OpenSearch_2.7'
    '2.9':
      EngineVersion: 'OpenSearch_2.9'
    '2.11':
      EngineVersion: 'OpenSearch_2.11'

Conditions:
  myOpensearchLongerEnableHA:
    !Not [
      !Equals [
        !FindInMap [
          myOpensearchLongerEnvironmentConfigMap,
          !Ref Env,
          InstanceCount
        ],
        1
      ]
    ]
  myOpensearchLongerCreateProdSubFilter:
    !Or [
      !Equals [!Ref Env, prod],
      !Equals [!Ref Env, production],
      !Equals [!Ref Env, PROD],
      !Equals [!Ref Env, PRODUCTION]
    ]

Resources:
  myOpensearchLongerOpenSearchSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your OS credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/MY_OPENSEARCH_LONGER'
      Description: !Sub OpenSearch main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "opensearch"}'
        GenerateStringKey: 'password'
        ExcludePunctuation: false
        RequireEachIncludedType: true
        IncludeSpace: false
        PasswordLength: 20
        ExcludeCharacters: '[]{}()"@/\;=?&`><:|#'

  # Security group to add OS to the VPC,
  # and to allow the Fargate containers to talk to OS
  myOpensearchLongerOpenSearchSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group to access OS'
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy:
      !FindInMap [
        myOpensearchLongerEnvironmentConfigMap,
        !Ref Env,
        DeletionPolicy
      ]
    UpdateReplacePolicy: Retain
    Properties:
      GroupDescription: 'The Security Group for my-opensearch-longer to access OpenSearch.'
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-my-opensearch-longer-OpenSearch-SecurityGroup'

  # Enable ingress from other ECS services created within the environment.
  myOpensearchLongerOpenSearchIngress:
    Metadata:
      'aws:copilot:description': 'Allow ingress from containers in my application to the OpenSearch cluster'
    Type: AWS::EC2::SecurityGroupIngress
    DeletionPolicy:
      !FindInMap [
        myOpensearchLongerEnvironmentConfigMap,
        !Ref Env,
        DeletionPolicy
      ]
    UpdateReplacePolicy: Retain
    Properties:
      Description: Ingress Security Group from Fargate containers
      GroupId: !Ref 'myOpensearchLongerOpenSearchSecurityGroup'
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref EnvironmentSecurityGroup

  myOpensearchLongerOpenSearchDomain:
    Type: 'AWS::OpenSearchService::Domain'
    DeletionPolicy:
      !FindInMap [
        myOpensearchLongerEnvironmentConfigMap,
        !Ref Env,
        DeletionPolicy
      ]
    UpdateReplacePolicy: Retain
    Properties:
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'es:ESHttp*'
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/myopensearchlon*'
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName:
            !Join [
              '',
              [
                '{{resolve:secretsmanager:',
                !Ref myOpensearchLongerOpenSearchSecret,
                ':SecretString:username}}'
              ]
            ]
          MasterUserPassword:
            !Join [
              '',
              [
                '{{resolve:secretsmanager:',
                !Ref myOpensearchLongerOpenSearchSecret,
                ':SecretString:password}}'
              ]
            ]
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: 'Policy-Min-TLS-1-2-2019-07'
      EngineVersion: !FindInMap
        - myOpensearchLongerEngineVersionMap
        - !FindInMap [
            myOpensearchLongerEnvironmentConfigMap,
            !Ref Env,
            EngineVersion
          ]
        - EngineVersion
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
      EBSOptions:
        EBSEnabled: true
        VolumeSize:
          !FindInMap [
            myOpensearchLongerEnvironmentConfigMap,
            !Ref Env,
            VolumeSize
          ]
        VolumeType: gp2
      ClusterConfig:
        DedicatedMasterEnabled:
          !If [
            myOpensearchLongerEnableHA,
            !FindInMap [
              myOpensearchLongerEnvironmentConfigMap,
              !Ref Env,
              DedicatedMaster
            ],
            false
          ]
        InstanceCount:
          !FindInMap [
            myOpensearchLongerEnvironmentConfigMap,
            !Ref Env,
            InstanceCount
          ]
        InstanceType:
          !FindInMap [
            myOpensearchLongerEnvironmentConfigMap,
            !Ref Env,
            InstanceType
          ]
        ZoneAwarenessEnabled: !If [myOpensearchLongerEnableHA, true, false]
        ZoneAwarenessConfig: !If
          - myOpensearchLongerEnableHA
          - AvailabilityZoneCount: 2 #Fn::length always resolves to 1 despite there being subnets.
          - !Ref 'AWS::NoValue'
      VPCOptions:
        SecurityGroupIds:
          - !Ref myOpensearchLongerOpenSearchSecurityGroup
        SubnetIds: !If
          - myOpensearchLongerEnableHA
          - !Split [',', !Ref PrivateSubnets]
          - - !Select [0, !Split [',', !Ref PrivateSubnets]]
      SoftwareUpdateOptions:
        AutoSoftwareUpdateEnabled: true
      LogPublishingOptions:
        AUDIT_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt myOpensearchLongerOpenSearchAuditLogGroup.Arn
          Enabled: true
        ES_APPLICATION_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt myOpensearchLongerOpenSearchApplicationLogGroup.Arn
          Enabled: true
        SEARCH_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt myOpensearchLongerOpenSearchSlowSearchLogGroup.Arn
          Enabled: true
        INDEX_SLOW_LOGS:
          CloudWatchLogsLogGroupArn: !GetAtt myOpensearchLongerOpenSearchSlowIndexLogGroup.Arn
          Enabled: true
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-my-opensearch-longer-OpenSearch-Domain'
        - Key: 'Copilot-Application'
          Value: !Sub ${App}
        - Key: 'Copilot-Environment'
          Value: !Sub ${Env}

  myOpensearchLongerOpenSearchEndpointConfigParam:
    Type: AWS::SSM::Parameter
    DependsOn:
      - myOpensearchLongerOpenSearchDomain
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/MY_OPENSEARCH_LONGER'
      Type: String
      Value: !Sub
        - 'https://${username}:${password}@${url}'
        - url: !GetAtt myOpensearchLongerOpenSearchDomain.DomainEndpoint
          username:
            !Join [
              '',
              [
                '{{resolve:secretsmanager:',
                !Ref myOpensearchLongerOpenSearchSecret,
                ':SecretString:username}}'
              ]
            ]
          password:
            !Join [
              '',
              [
                '{{resolve:secretsmanager:',
                !Ref myOpensearchLongerOpenSearchSecret,
                ':SecretString:password}}'
              ]
            ]

  myOpensearchLongerOpenSearchAuditLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/opensearch/${App}/${Env}/myOpensearchLonger/audit'
      RetentionInDays: 7
      Tags:
        - Key: 'Copilot-Application'
          Value: !Sub ${App}
        - Key: 'Copilot-Environment'
          Value: !Sub ${Env}

  myOpensearchLongerOpenSearchApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/opensearch/${App}/${Env}/myOpensearchLonger/application'
      RetentionInDays: 7
      Tags:
        - Key: 'Copilot-Application'
          Value: !Sub ${App}
        - Key: 'Copilot-Environment'
          Value: !Sub ${Env}

  myOpensearchLongerOpenSearchSlowSearchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/opensearch/${App}/${Env}/myOpensearchLonger/slow-search'
      RetentionInDays: 7
      Tags:
        - Key: 'Copilot-Application'
          Value: !Sub ${App}
        - Key: 'Copilot-Environment'
          Value: !Sub ${Env}

  myOpensearchLongerOpenSearchSlowIndexLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/opensearch/${App}/${Env}/myOpensearchLonger/slow-index'
      RetentionInDays: 7
      Tags:
        - Key: 'Copilot-Application'
          Value: !Sub ${App}
        - Key: 'Copilot-Environment'
          Value: !Sub ${Env}

  myOpensearchLongerSubscriptionFilterApplication:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - myOpensearchLongerOpenSearchApplicationLogGroup
    Properties:
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/CWLtoSubscriptionFilterRole'
      LogGroupName: !Sub '/aws/opensearch/${App}/${Env}/myOpensearchLonger/application'
      FilterName: !Sub '/aws/opensearch/${App}/${Env}/${myOpensearchLongerOpenSearchDomain}/application'
      FilterPattern: ''
      DestinationArn: !If [myOpensearchLongerCreateProdSubFilter, '', '']

  myOpensearchLongerSubscriptionFilterAudit:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - myOpensearchLongerOpenSearchAuditLogGroup
    Properties:
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/CWLtoSubscriptionFilterRole'
      LogGroupName: !Sub '/aws/opensearch/${App}/${Env}/myOpensearchLonger/audit'
      FilterName: !Sub '/aws/opensearch/${App}/${Env}/${myOpensearchLongerOpenSearchDomain}/audit'
      FilterPattern: ''
      DestinationArn: !If [myOpensearchLongerCreateProdSubFilter, '', '']
