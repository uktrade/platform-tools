# Generated by platform-helper v0.1-TEST / 2023-08-22 16:00:00

Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

  # Parameters from the parent stack brought in via addons.parameters.yml...
  EnvironmentSecurityGroup:
    Type: String
  PrivateSubnets:
    Type: String
  VpcId:
    Type: String

Mappings:
  myRedisEnvironmentConfigMap:
    development:
      EngineVersion: '6.2'
      CacheNodeType: 'cache.t4g.medium'
      NumReplicas: 0
      DeletionPolicy: Delete
    production:
      EngineVersion: '6.2'
      CacheNodeType: 'cache.t4g.medium'
      NumReplicas: 0
      DeletionPolicy: Delete

  myRedisEngineVersionMap:
    '7.1':
      CacheParameterGroupFamily: 'redis7.x'
    '7.0':
      CacheParameterGroupFamily: 'redis7.x'
    '6.2':
      CacheParameterGroupFamily: 'redis6.x'
    '6.0':
      CacheParameterGroupFamily: 'redis6.x'
    '5.0.6':
      CacheParameterGroupFamily: 'redis5.0'
    '5.0.4':
      CacheParameterGroupFamily: 'redis5.0'
    '5.0.3':
      CacheParameterGroupFamily: 'redis5.0'
    '5.0.0':
      CacheParameterGroupFamily: 'redis5.0'
    '4.0.10':
      CacheParameterGroupFamily: 'redis4.0'
    '3.2.6':
      CacheParameterGroupFamily: 'redis3.2'

Conditions:
  myRedisHasAutomaticFailoverEnabled:
    !Not [
      !Equals [
        !FindInMap [myRedisEnvironmentConfigMap, !Ref Env, NumReplicas],
        0
      ]
    ]
  myRedisCreateProdSubFilter:
    !Or [
      !Equals [!Ref Env, prod],
      !Equals [!Ref Env, production],
      !Equals [!Ref Env, PROD],
      !Equals [!Ref Env, PRODUCTION]
    ]

Resources:
  myRedisCacheParameterGroup:
    Type: 'AWS::ElastiCache::ParameterGroup'
    DeletionPolicy:
      !FindInMap [myRedisEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      CacheParameterGroupFamily: !FindInMap
        - myRedisEngineVersionMap
        - !FindInMap [myRedisEnvironmentConfigMap, !Ref Env, EngineVersion]
        - CacheParameterGroupFamily
      Description: !Ref 'AWS::StackName'
      Properties: {}

  myRedisCacheSubnetGroupName:
    Type: 'AWS::ElastiCache::SubnetGroup'
    DeletionPolicy:
      !FindInMap [myRedisEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref 'AWS::StackName'
      SubnetIds: !Split [',', !Ref PrivateSubnets]

  myRedisSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DeletionPolicy:
      !FindInMap [myRedisEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref EnvironmentSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-my-redis-Redis-SecurityGroup'

  myRedisReplicationGroup:
    Type: 'AWS::ElastiCache::ReplicationGroup'
    DeletionPolicy:
      !FindInMap [myRedisEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      ReplicationGroupDescription: !Ref 'AWS::StackName'
      AtRestEncryptionEnabled: true
      AutomaticFailoverEnabled:
        !If [myRedisHasAutomaticFailoverEnabled, true, false]
      MultiAZEnabled: !If [myRedisHasAutomaticFailoverEnabled, true, false]
      CacheNodeType:
        !FindInMap [myRedisEnvironmentConfigMap, !Ref Env, CacheNodeType]
      CacheParameterGroupName: !Ref myRedisCacheParameterGroup
      CacheSubnetGroupName: !Ref myRedisCacheSubnetGroupName
      Engine: redis
      EngineVersion:
        !FindInMap [myRedisEnvironmentConfigMap, !Ref Env, EngineVersion]
      NumNodeGroups: 1 # run in non clustered mode with 1 master and 0-5 replicas
      ReplicasPerNodeGroup:
        !FindInMap [myRedisEnvironmentConfigMap, !Ref Env, NumReplicas]
      PreferredMaintenanceWindow: 'sat:07:00-sat:08:00'
      LogDeliveryConfigurations:
        - DestinationDetails:
            CloudWatchLogsDetails:
              LogGroup: !Sub '/aws/elasticache/${App}/${Env}/myRedis/slow'
          DestinationType: cloudwatch-logs
          LogFormat: json
          LogType: slow-log
        - DestinationDetails:
            CloudWatchLogsDetails:
              LogGroup: !Sub '/aws/elasticache/${App}/${Env}/myRedis/engine'
          DestinationType: cloudwatch-logs
          LogFormat: json
          LogType: engine-log
      SecurityGroupIds:
        - !Ref myRedisSecurityGroup

      TransitEncryptionEnabled: true
      # UpdatePolicy:
      #   UseOnlineResharding: true

  myRedisRedisSlowLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/elasticache/${App}/${Env}/myRedis/slow'
      RetentionInDays: 7
      Tags:
        - Key: 'Copilot-Application'
          Value: !Sub ${App}
        - Key: 'Copilot-Environment'
          Value: !Sub ${Env}

  myRedisRedisEngineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/elasticache/${App}/${Env}/myRedis/engine'
      RetentionInDays: 7
      Tags:
        - Key: 'Copilot-Application'
          Value: !Sub ${App}
        - Key: 'Copilot-Environment'
          Value: !Sub ${Env}

  # Redis endpoint stored in SSM so that other `services` can retrieve the endpoint.
  myRedisEndpointAddressParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/copilot/${App}/${Env}/secrets/MY_REDIS' # Other services can retrieve the endpoint from this path.
      Type: String
      Value: !Sub
        - 'rediss://${url}:${port}'
        - url: !GetAtt 'myRedisReplicationGroup.PrimaryEndPoint.Address'
          port: !GetAtt 'myRedisReplicationGroup.PrimaryEndPoint.Port'

  myRedisSubscriptionFilterEngine:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - myRedisRedisEngineLogGroup
    Properties:
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/CWLtoSubscriptionFilterRole'
      LogGroupName: !Sub '/aws/elasticache/${App}/${Env}/myRedis/engine'
      FilterName: !Sub '/aws/elasticache/${App}/${Env}/${myRedisReplicationGroup}/engine'
      FilterPattern: ''
      DestinationArn: !If [myRedisCreateProdSubFilter, '', '']

  myRedisSubscriptionFilterSlow:
    Type: AWS::Logs::SubscriptionFilter
    DependsOn:
      - myRedisRedisSlowLogGroup
    Properties:
      RoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/CWLtoSubscriptionFilterRole'
      LogGroupName: !Sub '/aws/elasticache/${App}/${Env}/myRedis/slow'
      FilterName: !Sub '/aws/elasticache/${App}/${Env}/${myRedisReplicationGroup}/slow'
      FilterPattern: ''
      DestinationArn: !If [myRedisCreateProdSubFilter, '', '']
