# Generated by platform-helper v0.1-TEST / 2023-08-22 16:00:00
Transform: AWS::LanguageExtensions

Parameters:
  # Copilot required Parameters...
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.

Mappings:
  myS3BucketWithAnObjectEnvironmentConfigMap:
    # Create an entry for each environment

    development:
      BucketName: 'my-bucket-dev'
      DeletionPolicy: Delete
    production:
      BucketName: 'my-bucket-prod'
      DeletionPolicy: Delete

Conditions:
  myS3BucketWithAnObjectApplyRetentionPolicy: !Not
    - !Equals
      - !FindInMap
        - myS3BucketWithAnObjectEnvironmentConfigMap
        - !Ref Env
        - RetentionMode
        - DefaultValue: No retention
      - No retention
  myS3BucketWithAnObjectRetentionPolicyDurationIsInDays: !Equals
    - !FindInMap
      - myS3BucketWithAnObjectEnvironmentConfigMap
      - !Ref Env
      - RetentionDurationType
      - DefaultValue: Days
    - Days

Resources:
  myS3BucketWithAnObjectKMSKey:
    Type: "AWS::KMS::Key"
    DeletionPolicy: !FindInMap [myS3BucketWithAnObjectEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      Description: "KMS Key for RDS encryption"
      KeyPolicy:
        Version: '2012-10-17'
        Id: !Sub '${App}-${Env}-myS3BucketWithAnObject-key'
        Statement:
        - Sid: Enable IAM User Permissions
          Effect: Allow
          Principal:
            AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
          Action: kms:*
          Resource: '*'

  myS3BucketWithAnObjectKeyAlias:
    Type: 'AWS::KMS::Alias'
    DeletionPolicy: !FindInMap [myS3BucketWithAnObjectEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      AliasName: !Sub 'alias/${App}-${Env}-myS3BucketWithAnObject-key'
      TargetKeyId: !Ref myS3BucketWithAnObjectKMSKey

  myS3BucketWithAnObjectBucket:
    Metadata:
      'aws:copilot:description': 'An Amazon S3 bucket to store and retrieve objects for myS3BucketWithAnObject'
    Type: AWS::S3::Bucket
    DeletionPolicy: !FindInMap [myS3BucketWithAnObjectEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !FindInMap [myS3BucketWithAnObjectEnvironmentConfigMap, !Ref Env, BucketName]
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: aws:kms
            KMSMasterKeyID: !Ref myS3BucketWithAnObjectKMSKey
      ObjectLockConfiguration:
        !If
        - myS3BucketWithAnObjectApplyRetentionPolicy
        - ObjectLockEnabled: Enabled
          Rule:
            DefaultRetention: !If
              - myS3BucketWithAnObjectRetentionPolicyDurationIsInDays
              - Mode: !FindInMap [myS3BucketWithAnObjectEnvironmentConfigMap, !Ref Env, RetentionMode]
                Days: !FindInMap
                  - myS3BucketWithAnObjectEnvironmentConfigMap
                  - !Ref Env
                  - RetentionDuration
              - Mode: !FindInMap [myS3BucketWithAnObjectEnvironmentConfigMap, !Ref Env, RetentionMode]
                Years: !FindInMap
                  - myS3BucketWithAnObjectEnvironmentConfigMap
                  - !Ref Env
                  - RetentionDuration
        - !Ref AWS::NoValue
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Copilot-application
          Value: !Ref App
        - Key: Copilot-environment
          Value: !Ref Env
        - Key: Copilot-deletion-policy
          Value: !FindInMap [myS3BucketWithAnObjectEnvironmentConfigMap, !Ref Env, DeletionPolicy]

  myS3BucketWithAnObjectBucketPolicy:
    Metadata:
      'aws:copilot:description': 'A bucket policy to deny unencrypted access to the bucket and its contents'
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: !FindInMap [myS3BucketWithAnObjectEnvironmentConfigMap, !Ref Env, DeletionPolicy]
    UpdateReplacePolicy: Retain
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ForceHTTPS
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub ${ myS3BucketWithAnObjectBucket.Arn}/*
              - !Sub ${ myS3BucketWithAnObjectBucket.Arn}
            Condition:
              Bool:
                "aws:SecureTransport": false
      Bucket: !Ref myS3BucketWithAnObjectBucket


  myS3BucketWithAnObjectS3ObjectUploader:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${App}-${Env}-object-uploader"
      Handler: index.handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt myS3BucketWithAnObjectS3ObjectUploaderRole.Arn
      Code:
        ZipFile: |
          import json
          import logging
          import time
          from urllib import request
          from urllib.error import HTTPError
          import boto3
          from botocore.exceptions import ClientError
          logger = logging.getLogger(__name__)
          def send_response(event, context, status, message):
              bucket = event["ResourceProperties"].get("S3Bucket", "")
              key = event["ResourceProperties"].get("S3ObjectKey", "")
              body = json.dumps(
                  {
                      "Status": status,
                      "Reason": message,
                      "StackId": event["StackId"],
                      "RequestId": event["RequestId"],
                      "LogicalResourceId": event["LogicalResourceId"],
                      "PhysicalResourceId": f"s3://{bucket}/{key}",
                      "Data": {
                          "Bucket": bucket,
                          "Key": key,
                      },
                  }
              ).encode()
              send = request.Request(event["ResponseURL"], data=body)
              send.get_method = lambda: "PUT"
              count = 0
              while count < 5:
                  count += 1
                  try:
                      request.urlopen(send)
                      break
                  except HTTPError as ex:
                      if count < 5:
                          logger.warning(f"{ex} [{ex.url}] - Retry {count}")
                      else:
                          logger.error(f"{ex} [{ex.url}]")
                      time.sleep(count * 5)
          def handler(event, context):
              s3_client = boto3.client("s3")
              request_type = event["RequestType"]
              properties = event["ResourceProperties"]
              required_properties = [
                  "CopilotApplication",
                  "CopilotEnvironment",
                  "S3Bucket",
                  "S3ObjectBody",
                  "S3ObjectKey",
              ]
              missing_properties = [p for p in required_properties if p not in properties]
              if missing_properties:
                  missing_properties.sort()
                  return send_response(
                      event, context, "FAILED", f"Missing required properties: {missing_properties}"
                  )
              try:
                  if request_type == "Delete":
                      s3_client.delete_object(
                          Bucket=properties["S3Bucket"],
                          Key=properties["S3ObjectKey"],
                      )
                  else:
                      content_type = properties.get("S3ObjectContentType", "binary/octet-stream") 
                      s3_client.put_object(
                          Bucket=properties["S3Bucket"],
                          Key=properties["S3ObjectKey"],
                          Body=properties["S3ObjectBody"].encode("utf-8"),
                          ContentType=content_type,
                      )
                  send_response(event, context, "SUCCESS", f"{request_type}d")
              except ClientError as ex:
                  send_response(event, context, "FAILED", f"{ex}")


  myS3BucketWithAnObjectS3ObjectUploaderRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${App}-${Env}-object-uploader-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub "${App}-${Env}-object-uploader-policy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Sub ${ myS3BucketWithAnObjectBucket.Arn }/*
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'kms:GenerateDataKey'
                Resource: !GetAtt myS3BucketWithAnObjectKMSKey.Arn


  myS3BucketWithAnObjectS3Object0:
    Type: 'Custom::S3ObjectUploader'
    Properties:
      ServiceToken: !GetAtt myS3BucketWithAnObjectS3ObjectUploader.Arn
      CopilotApplication: !Sub "${App}"
      CopilotEnvironment: !Sub "${Env}"
      S3Bucket: !Ref myS3BucketWithAnObjectBucket
      S3ObjectKey: healthcheck.txt
      S3ObjectBody: HEALTHCHECK WORKS!
      S3ObjectContentType: 'text/plain'




Outputs:
  myS3BucketWithAnObjectName:
    Description: "The name of a user-defined bucket."
    Value: !Ref myS3BucketWithAnObjectBucket

  myS3BucketWithAnObjectKMSKeyARN:
    Description: "ARN of the KMS Key"
    Value: !GetAtt myS3BucketWithAnObjectKMSKey.Arn
    Export:
      Name: !Sub "${App}-${Env}-myS3BucketWithAnObject-KMSKeyARN"
