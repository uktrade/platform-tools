import os
from collections import OrderedDict
from copy import deepcopy
from datetime import datetime
from pathlib import Path

from dbt_platform_helper.constants import PLATFORM_HELPER_PACKAGE_NAME
from dbt_platform_helper.providers.version import InstalledVersionProvider
from dbt_platform_helper.providers.yaml_file import YamlFileProvider

SERVICE_TYPES = ["Load Balanced Web Service", "Backend Service"]


class SchemaV1ToV2Migration:
    def from_version(self) -> int:
        return 1

    def migrate(self, platform_config: dict) -> dict:
        self._create_services_directory_and_config_files(platform_config)

        return platform_config

    def _create_services_directory_and_config_files(self, platform_config: dict) -> None:
        service_directory = Path("services/")
        service_directory.mkdir(parents=True, exist_ok=True)

        for dirname, _, filenames in os.walk("copilot"):
            if "manifest.yml" in filenames and "environments" not in dirname:
                copilot_manifest = YamlFileProvider.load(f"{dirname}/manifest.yml")
                service_manifest = OrderedDict(deepcopy(copilot_manifest))

                if service_manifest["type"] in SERVICE_TYPES:
                    service_name = service_manifest["name"]
                    service_path = service_directory / service_name

                    for env in service_manifest["environments"]:
                        env_config = service_manifest["environments"][env]
                        if "http" in env_config:
                            if "alb" in env_config["http"]:
                                del env_config["http"]["alb"]

                    service_manifest = _find_and_replace(
                        service_manifest,
                        "${COPILOT_APPLICATION_NAME}",
                        platform_config["application"],
                    )
                    service_manifest = _find_and_replace(
                        service_manifest,
                        "${COPILOT_ENVIRONMENT_NAME}",
                        "${PLATFORM_ENVIRONMENT_NAME}",
                    )

                    service_manifest = _remove_empty_keys(service_manifest)

                    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    message = f"# Generated by platform-helper {InstalledVersionProvider.get_semantic_version(PLATFORM_HELPER_PACKAGE_NAME)} / {current_date}.\n\n"

                    YamlFileProvider.write(
                        f"{service_path}/service-config.yml", dict(service_manifest), message
                    )


def _remove_empty_keys(config):
    if not isinstance(config, (dict, OrderedDict)):
        return config

    cleaned = config.__class__()

    for k, v in config.items():
        if isinstance(v, (dict, OrderedDict)):
            v = _remove_empty_keys(v)
        if v not in ("", None, [], {}, ()):
            cleaned[k] = v

    return cleaned


def _find_and_replace(config, string, replacement):
    if isinstance(config, (dict, OrderedDict)):
        return {k: _find_and_replace(v, string, replacement) for k, v in config.items()}
    elif isinstance(config, list):
        return [_find_and_replace(item, string, replacement) for item in config]
    elif isinstance(config, str):
        return config.replace(string, replacement)
    else:
        return replacement if config == string else config
