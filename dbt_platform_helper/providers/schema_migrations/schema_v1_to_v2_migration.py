import os
from collections import OrderedDict
from copy import deepcopy
from datetime import datetime
from pathlib import Path

from dbt_platform_helper.constants import PLATFORM_HELPER_PACKAGE_NAME
from dbt_platform_helper.providers.version import InstalledVersionProvider
from dbt_platform_helper.providers.yaml_file import YamlFileProvider

SERVICE_TYPES = ["Load Balanced Web Service", "Backend Service"]


class SchemaV1ToV2Migration:
    def from_version(self) -> int:
        return 1

    def migrate(self, platform_config: dict) -> dict:
        migrated_config = deepcopy(platform_config)

        self._create_services_directory_and_config_files()

        return migrated_config

    def _create_services_directory_and_config_files(self) -> None:
        service_directory = Path("services/")
        service_directory.mkdir(parents=True, exist_ok=True)

        for dirname, _, filenames in os.walk("copilot"):
            if "manifest.yml" in filenames and "environments" not in dirname:
                copilot_manifest_file = YamlFileProvider.load(f"{dirname}/manifest.yml")
                copilot_manifest = OrderedDict(deepcopy(copilot_manifest_file))

                if copilot_manifest["type"] in SERVICE_TYPES:
                    service_name = copilot_manifest["name"]
                    service_path = service_directory / service_name

                    for env in copilot_manifest["environments"]:
                        env_config = copilot_manifest["environments"][env]

                        if "http" in env_config:
                            if "alb" in env_config["http"]:
                                del env_config["http"]["alb"]

                        # ClickIOProvider().info(copilot_manifest["environments"].get(env))

                    service_manifest = _remove_empty_keys(copilot_manifest)

                    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    message = f"# Generated by platform-helper {InstalledVersionProvider.get_semantic_version(PLATFORM_HELPER_PACKAGE_NAME)} / {current_date}.\n\n"

                    YamlFileProvider.write(
                        f"{service_path}/service-config.yml", dict(service_manifest), message
                    )


def _remove_empty_keys(config):
    if not isinstance(config, (dict, OrderedDict)):
        return config

    cleaned = config.__class__()

    for k, v in config.items():
        if isinstance(v, (dict, OrderedDict)):
            v = _remove_empty_keys(v)
        if v not in ("", None, [], {}, ()):
            cleaned[k] = v

    return cleaned
