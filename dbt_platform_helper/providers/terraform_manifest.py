import json
from datetime import datetime
from importlib.metadata import version
from pathlib import Path

from dbt_platform_helper.constants import DEFAULT_TERRAFORM_PLATFORM_MODULES_VERSION
from dbt_platform_helper.constants import SUPPORTED_TERRAFORM_VERSION
from dbt_platform_helper.providers.files import FileProvider


class TerraformManifestProvider:
    def __init__(self, platform_config: dict, file_provider: FileProvider = FileProvider()):
        self.platform_config = platform_config
        self.default_account = (
            self.platform_config.get("environments", {})
            .get("*", {})
            .get("accounts", {})
            .get("deploy", {})
            .get("name")
        )
        self.file_provider = file_provider

    def generate_codebase_pipeline_config(self):
        """Expects the platform config to have already had defaults applied."""
        terraform = {}
        self._add_header(terraform)
        self._add_locals(terraform)
        self._add_provider(terraform)
        self._add_backend(terraform)
        self._add_codebase_pipeline_module(terraform)

        self.file_provider.mkfile(
            str(Path(".").absolute()), "terraform/codebase-pipelines", json.dumps(terraform), True
        )

    @staticmethod
    def _add_header(terraform):
        time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        version_header = f"Generated by platform-helper {version('dbt-platform-helper')} / {time}."
        warning = "WARNING: This is an autogenerated file, not for manual editing."
        # The "//" key denotes a comment in terraform json.
        terraform["//"] = f"{version_header} {warning}"

    @staticmethod
    def _add_locals(terraform):
        terraform["locals"] = {
            "platform_config": '${yamldecode(file("../../platform-config.yml"))}',
            "application": '${local.platform_config["application"]}',
            "all_codebases": '${local.platform_config["codebase_pipelines"]}',
            "environments": '${local.platform_config["environments"]}',
        }

    def _add_provider(self, terraform):
        terraform["provider"] = {"aws": {}}
        terraform["provider"]["aws"]["region"] = "eu-west-2"
        terraform["provider"]["aws"]["profile"] = self.default_account
        terraform["provider"]["aws"]["alias"] = self.default_account
        terraform["provider"]["aws"]["shared_credentials_files"] = ["~/.aws/config"]

    def _add_backend(self, terraform):
        terraform["terraform"] = {
            "required_version": SUPPORTED_TERRAFORM_VERSION,
            "backend": {
                "s3": {
                    "bucket": f"terraform-platform-state-{self.default_account}",
                    "key": f"tfstate/application/{self.platform_config['application']}-codebase-pipelines.tfstate",
                    "region": "eu-west-2",
                    "encrypt": True,
                    "kms_key_id": f"alias/terraform-platform-state-s3-key-{self.default_account}",
                    "dynamodb_table": f"terraform-platform-lockdb-{self.default_account}",
                }
            },
            "required_providers": {"aws": {"source": "hashicorp/aws", "version": "~> 5"}},
        }

    @staticmethod
    def _add_codebase_pipeline_module(terraform):
        source = f"git::https://github.com/uktrade/terraform-platform-modules.git//codebase-pipelines?depth=1&ref={DEFAULT_TERRAFORM_PLATFORM_MODULES_VERSION}"
        terraform["module"] = {
            "codebase-pipelines": {
                "source": source,
                "for_each": "${local.all_codebases}",
                "application": "${local.application}",
                "codebase": "${each.key}",
                "repository": "${each.value.repository}",
                "additional_ecr_repository": '${lookup(each.value, "additional_ecr_repository", null)}',
                "pipelines": "${each.value.pipelines}",
                "services": "${each.value.services}",
                "requires_image_build": "${each.value.requires_image_build}",
                "slack_channel": "${each.value.slack_channel}",
                "env_config": "${local.environments}",
            }
        }
