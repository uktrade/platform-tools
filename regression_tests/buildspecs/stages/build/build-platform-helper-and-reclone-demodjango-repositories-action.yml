version: 0.2

env:
  parameter-store:
    SLACK_TOKEN: /codebuild/slack_oauth_token
    SLACK_CHANNEL_ID: /codebuild/slack_oauth_channel

phases:
  install:
    commands:
      - echo -e "\nSetting local Python versions"
      - pyenv versions | awk 'match($0, /[0-9]\.[0-9]+\.[0-9]+/) { print substr($0, RSTART, RLENGTH) }' | tac > .python-version
      - cat .python-version
      - |
        echo -e "\nCheck we are using the latest installed Python 3.x"
        python --version
        which python

      # Ensure clean environment
      - rm -rf venv

      # Install zip facility
      - apt-get update -y
      - apt-get install -y zip

      # Use a Python virtual environment so that the dependencies are stored somewhere we can pass around via the output artifact
      - echo -e "\nCreate virtual Python environment"
      # Todo: Have tried copies rto see if it helps with activating it correctly in the subsequent actions, but it doesn't seem to work.
      - python -m venv venv
      - echo -e "\nActivate virtual Python environment"
      - source venv/bin/activate

      # Temporary debug output starts
      - pip install --upgrade pip
      - echo "Python in venv - $(which python)"
      - echo "Pip in venv - $(which pip)"
      - echo "$VIRTUAL_ENV"
      - python --version
      - which python
      - pip list
      # Temporary debug output ends

      # Installing dependencies
      - echo -e "\nInstalling dependencies"
      - venv/bin/pip install poetry
      - venv/bin/poetry install
      - venv/bin/pip install dbt-platform-helper
      # Temporary debug output...
      - pip list

      # Package virtual environment
      - mkdir -p build_output
      - echo "Packaging the virtual environment"
      - echo "Current working directory - $(pwd)"
      - zip -r build_output/venv.zip venv > /dev/null # package the virtual env into zip file & move into directory

  build:
    commands:
      - echo -e "\nRunning regression tests - Build stage\n"
      - source ./regression_tests/stages/set_up_git_config.sh
      - ./regression_tests/stages/build_platform_helper.sh
      # Temporary debug output starts
      - platform-helper --version
      - which platform-helper
      - python --version
      - which python
      - pip list
      # Temporary debug output ends

      # The aws-codepipeline Terraform provider does not support setting primary_source,
      # so we cannot get the other codebases we need into the same output artifact
      # without recloning them.
      - ./regression_tests/stages/clone_demodjango_deploy.sh
      - ./regression_tests/stages/clone_demodjango.sh
      - cd demodjango && poetry install
      - echo -e "\nMoving necessary files to the build_output directory"
      - cd ..
      - mv demodjango build_output/
      - mv demodjango-deploy build_output/

#      # Add source_output_platform_tools artefact from Source stage
#      - echo -e "\nUnzipping source_output_platform_tools.zip into build_output"
##      - unzip /codebuild/output/src*/source_output_platform_tools.zip -d build_output/
#      - echo -e "\nListing files in /codebuild/output/artifacts/"
#      - ls -la /codebuild/output/artifacts/
#
#      - echo -e "\nListing files in /codebuild/output/src*"
#      - ls -la /codebuild/output/src*
#
#      - echo -e "\nListing files in PWD"
#      - ls -la

      # Copy all files and directories, excluding the build_output directory
      - |
        for item in *; do
          if [[ "$item" != "build_output" ]]; then
            cp -r "$item" build_output/
          fi
        done


      - echo "PWD & Contents of build_output before uploading artifacts:"
      - pwd
      - ls -la build_output/

#      - echo -e "\nChecking contents of test buildspec directory"
#      - ls -la regression_tests/buildspecs/stages/test/

#      - echo "Unzipping source_output_platform_tools..."
#      - mkdir -p /tmp/source_output_platform_tools
#      - cd /tmp/source_output_platform_tools
#      - unzip $CODEBUILD_SRC_DIR_source_output_platform_tools/source_output_platform_tools.zip


  post_build:
    commands:
      - |
        if [ "${CODEBUILD_BUILD_SUCCEEDING}" != "1" ] && git branch --contains $CODEBUILD_RESOLVED_SOURCE_VERSION | grep -q "main"; then
          MESSAGE=":alert: @here DBT Platform regression tests have failed in <https://eu-west-2.console.aws.amazon.com/codesuite/codebuild/763451185160/projects/platform-tools-test/build/${CODEBUILD_BUILD_ID}/?region=eu-west-2|build ${CODEBUILD_BUILD_NUMBER}> :sob:"
          platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "" "${MESSAGE}"
        fi

artifacts:
  files:
    - 'build_output/*'
