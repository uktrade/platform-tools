version: 0.2

env:
  parameter-store:
    SLACK_TOKEN: /codebuild/slack_oauth_token
    SLACK_CHANNEL_ID: /codebuild/slack_oauth_channel

phases:
  install:
    commands:
      - echo -e "\nSetting local Python versions"
      - pyenv versions | awk 'match($0, /[0-9]\.[0-9]+\.[0-9]+/) { print substr($0, RSTART, RLENGTH) }' | tac > .python-version
      - cat .python-version
      - |
        echo -e "\nCheck we are using the latest installed Python 3.x"
        python --version
        which python

      # Ensure clean environment
      - rm -rf venv
      -
      # Use a Python virtual environment so that the dependencies are stored somewhere we can pass around via the output artifact
      - echo -e "\nCreate virtual Python environment"
      # Todo: Have tried copies rto see if it helps with activating it correctly in the subsequent actions, but it doesn't seem to work.
      - python -m venv venv
      - echo -e "\nActivate virtual Python environment"
      - source venv/bin/activate

      # Temporary debug output starts
      - pip install -upgrade pip
      - echo "Python in venv - $(which python)"
      - echo "Pip in venv - $(which pip)"
      - echo "$VIRTUAL_ENV"
      - python --version
      - which python
      - pip list
      # Temporary debug output ends

      # Installing dependencies
      - echo -e "\nInstalling dependencies"
      - venv/bin/pip install poetry
      - venv/bin/poetry install
      - venv/bin/pip install dbt-platform-helper
      # Temporary debug output...
      - pip list
      - cd ..
      - echo ""Packaging the virtual environment"
      - zip -r venv.zip venv # packge the virtual env into zip file

  build:
    commands:
      - echo -e "\nRunning regression tests - Build stage\n"
      - source ./regression_tests/stages/set_up_git_config.sh
      - ./regression_tests/stages/build_platform_helper.sh
      # Temporary debug output starts
      - platform-helper --version
      - which platform-helper
      - python --version
      - which python
      - pip list
      # Temporary debug output ends
      # The aws-codepipeline Terraform provider does not support setting primary_source,
      # so we cannot get the other codebases we need into the same output artifact
      # without recloning them.
      - ./regression_tests/stages/clone_demodjango_deploy.sh
      - ./regression_tests/stages/clone_demodjango.sh
      - cd demodjango && poetry install
      # Temporary debug output...
      - pip list
      - echo "Contents of build_output before uploading artifacts:"
      - ls -la


  post_build:
    commands:
      - |
        if [ "${CODEBUILD_BUILD_SUCCEEDING}" != "1" ] && git branch --contains $CODEBUILD_RESOLVED_SOURCE_VERSION | grep -q "main"; then
          MESSAGE=":alert: @here DBT Platform regression tests have failed in <https://eu-west-2.console.aws.amazon.com/codesuite/codebuild/763451185160/projects/platform-tools-test/build/${CODEBUILD_BUILD_ID}/?region=eu-west-2|build ${CODEBUILD_BUILD_NUMBER}> :sob:"
          platform-helper notify add-comment "${SLACK_CHANNEL_ID}" "${SLACK_TOKEN}" "" "${MESSAGE}"
        fi

artifacts:
  files:
    - '**/*'
    - venv.zip
